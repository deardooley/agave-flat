#
# This is the Apache server configuration file providing SSL support.
# It contains the configuration directives to instruct the server how to
# serve pages over an https connection. For detailing information about these
# directives see <URL:http://httpd.apache.org/docs/2.2/mod/mod_ssl.html>
#
# Do NOT simply read the instructions in here without understanding
# what they do.  They're here only as hints or reminders.  If you are unsure
# consult the online docs. You have been warned.
#

LoadModule ssl_module modules/mod_ssl.so

#
# When we also provide SSL we have to listen to the
# the HTTPS port in addition.
#
Listen 443

##
##  SSL Global Context
##
##  All SSL configuration in this context applies both to
##  the main server and all SSL-enabled virtual hosts.
##

#   Pass Phrase Dialog:
#   Configure the pass phrase gathering process.
#   The filtering dialog program (`builtin' is a internal
#   terminal dialog) has to provide the pass phrase on stdout.
SSLPassPhraseDialog  builtin

#   Inter-Process Session Cache:
#   Configure the SSL Session Cache: First the mechanism
#   to use and second the expiring timeout (in seconds).
#SSLSessionCache        dc:UNIX:/var/cache/mod_ssl/distcache
SSLSessionCache         shmcb:/var/cache/mod_ssl/scache(512000)
SSLSessionCacheTimeout  300

#   Semaphore:
#   Configure the path to the mutual exclusion semaphore the
#   SSL engine uses internally for inter-process synchronization.
Mutex sysvsem default

#   Pseudo Random Number Generator (PRNG):
#   Configure one or more sources to seed the PRNG of the
#   SSL library. The seed data should be of good random quality.
#   WARNING! On some platforms /dev/random blocks if not enough entropy
#   is available. This means you then cannot use the /dev/random device
#   because it would lead to very long connection times (as long as
#   it requires to make more entropy available). But usually those
#   platforms additionally provide a /dev/urandom device which doesn't
#   block. So, if available, use this one instead. Read the mod_ssl User
#   Manual for more details.
SSLRandomSeed startup file:/dev/urandom  256
SSLRandomSeed connect builtin
#SSLRandomSeed startup file:/dev/random  512
#SSLRandomSeed connect file:/dev/random  512
#SSLRandomSeed connect file:/dev/urandom 512

#
# Use "SSLCryptoDevice" to enable any supported hardware
# accelerators. Use "openssl engine -v" to list supported
# engine names.  NOTE: If you enable an accelerator and the
# server does not start, consult the error logs and ensure
# your accelerator is functioning properly.
#
SSLCryptoDevice builtin
#SSLCryptoDevice ubsec

##
## SSL Virtual Host Context
##

<VirtualHost _default_:443>
  # Use separate log files for the SSL virtual host; note that LogLevel
  # is not inherited from httpd.conf.
  LogLevel info

  LogFormat "[%{UNIQUE_ID}i] %h %l %u %t %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %>s %T %D %b \"%{Referer}i\" \"%{User-Agent}i\"" ssl_combined
  ErrorLog /var/log/apache2/ssl_error_log
  CustomLog /var/log/apache2/ssl_access_log ssl_combined

  #   SSL Engine Switch:
  #   Enable/Disable SSL for this virtual host.
  SSLEngine on

  SSLProxyEngine          On
  ProxyRequests           Off
  ProxyPreserveHost       On
  SSLProxyVerify          none
  SSLProxyCheckPeerName   off
  SSLProxyCheckPeerCN     off

  #   SSL Protocol support:
  # List the enable protocol levels with which clients will be able to
  # connect.  Disable SSLv2 access by default:
  SSLProtocol all -SSLv2

  #   SSL Cipher Suite:
  # List the ciphers that the client is permitted to negotiate.
  # See the mod_ssl documentation for a complete list.
  SSLCipherSuite ALL:!ADH:!EXPORT:!SSLv2:RC4+RSA:+HIGH:+MEDIUM:+LOW

  #   Server Certificate:
  # Point SSLCertificateFile at a PEM encoded certificate.  If
  # the certificate is encrypted, then you will be prompted for a
  # pass phrase.  Note that a kill -HUP will prompt again.  A new
  # certificate can be generated using the genkey(1) command.
  SSLCertificateFile /etc/ssl/apache2/server.pem

  #   Server Private Key:
  #   If the key is not combined with the certificate, use this
  #   directive to point at the key file.  Keep in mind that if
  #   you've both a RSA and a DSA private key you can configure
  #   both in parallel (to also allow the use of DSA ciphers, etc.)
  SSLCertificateKeyFile /etc/ssl/apache2/server.key

  #   Server Certificate Chain:
  #   Point SSLCertificateChainFile at a file containing the
  #   concatenation of PEM encoded CA certificates which form the
  #   certificate chain for the server certificate. Alternatively
  #   the referenced file can be the same as SSLCertificateFile
  #   when the CA certificates are directly appended to the server
  #   certificate for convinience.
  #SSLCertificateChainFile /etc/ssl/apache2/server-chain.crt

  #   Certificate Authority (CA):
  #   Set the CA certificate verification path where to find CA
  #   certificates for client authentication or alternatively one
  #   huge file containing all of them (file must be PEM encoded)
  #SSLCACertificateFile /etc/ssl/apache2/ca-bundle.crt

  #   Client Authentication (Type):
  #   Client certificate verification type and depth.  Types are
  #   none, optional, require and optional_no_ca.  Depth is a
  #   number which specifies how deeply to verify the certificate
  #   issuer chain before deciding the certificate is not valid.
  #SSLVerifyClient require
  #SSLVerifyDepth  10

  SetEnvIf User-Agent ".*MSIE.*" \
           nokeepalive ssl-unclean-shutdown \
           downgrade-1.0 force-response-1.0

  #   Per-Server Logging:
  #   The home of a custom SSL log file. Use this when you want a
  #   compact non-error SSL logfile on a virtual host basis.
  #CustomLog /proc/self/fd/1 \
  #          "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"
  CustomLog /var/log/apache2/ssl_access_log \
            "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"


  RewriteEngine On

  Header set Access-Control-Allow-Origin "*"
  Header set Access-Control-Allow-Credentials "true"
  Header set Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
  Header set Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization"

	#############################
	# Map routes with apim version first so we can hit 
	# the backend and frontend alike during testing
	#############################
	
	RewriteCond %{REQUEST_URI} ^/(.*)/v2
	RewriteRule ^/(.*)/v2(.*)$ /$1$2 [L,R=302]
	
	
	#############################
	# Now map the backend routes 
	#############################
	
    
  RewriteCond %{REQUEST_URI} ^/apps
  RewriteRule ^/apps(.*)$ https://proxy.host:8443/apps$1 [P]

  RewriteCond %{REQUEST_URI} ^/docs
  RewriteRule ^/docs(.*)$ https://proxy.host:8443/docs$1 [P]

  RewriteCond %{REQUEST_URI} ^/events
  RewriteRule ^/docs(.*)$ https://proxy.host:8443/events$1 [P]

  RewriteCond %{REQUEST_URI} ^/files
  RewriteRule ^/files(.*)$ https://proxy.host:8443/files$1 [P]

  RewriteCond %{REQUEST_URI} ^/jobs
  RewriteRule ^/jobs(.*)$ https://proxy.host:8443/jobs$1 [P]

  RewriteCond %{REQUEST_URI} ^/logging
  RewriteRule ^/logging(.*)$ https://proxy.host:8443/logging$1 [P]

  RewriteCond %{REQUEST_URI} ^/meta
  RewriteRule ^/meta(.*)$ https://proxy.host:8443/meta$1 [P]

  RewriteCond %{REQUEST_URI} ^/monitors
  RewriteRule ^/monitors(.*)$ https://proxy.host:8443/monitors$1 [P]

  RewriteCond %{REQUEST_URI} ^/notifications
  RewriteRule ^/notifications(.*)$ https://proxy.host:8443/notifications$1 [P]

  RewriteCond %{REQUEST_URI} ^/postits
  RewriteRule ^/postits(.*)$ https://proxy.host:8443/positits$1 [P]

  RewriteCond %{REQUEST_URI} ^/profiles
  RewriteRule ^/profiles(.*)$ https://proxy.host:8443/profiles$1 [P]

  RewriteCond %{REQUEST_URI} ^/realtime
  RewriteRule ^/realtime(.*)$ https://proxy.host:8443/realtime$1 [P]

  RewriteCond %{REQUEST_URI} ^/stats
  RewriteRule ^/stats(.*)$ https://proxy.host:8443/stats$1 [P]

  RewriteCond %{REQUEST_URI} ^/systems
  RewriteRule ^/systems(.*)$ https://proxy.host:8443/systems$1 [P]

  RewriteCond %{REQUEST_URI} ^/tags
  RewriteRule ^/tags(.*)$ https://proxy.host:8443/tags$1 [P]

  RewriteCond %{REQUEST_URI} ^/tenants
  RewriteRule ^/tenants(.*)$ https://proxy.host:8443/tenants$1 [P]

  RewriteCond %{REQUEST_URI} ^/transfers
  RewriteRule ^/transfers(.*)$ https://proxy.host:8443/transfers$1 [P]

  RewriteCond %{REQUEST_URI} ^/transforms
  RewriteRule ^/transforms(.*)$ https://proxy.host:8443/transforms$1 [P]

  RewriteCond %{REQUEST_URI} ^/usage
  RewriteRule ^/usage(.*)$ https://proxy.host:8443/usage$1 [P]

  RewriteCond %{REQUEST_URI} ^/uuids
  RewriteRule ^/uuids(.*)$ https://proxy.host:8443/uuids$1 [P]
	
</VirtualHost>
