swagger: '2.0'
info:
  version: 2.1.11
  title: Agave Platform Science API
  description: 'Power your digital lab and reduce the time from theory to discovery using the Agave Science-as-a-Service API Platform. Agave provides hosted services that allow researchers to manage data, conduct experiments, and publish and share results from anywhere at any time.'
  license:
    name: BSD 2-Clause
    url: 'https://opensource.org/licenses/BSD-2-Clause'
host: public.agaveapi.co
schemes:
  - https
basePath: /
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  agaveImplicit:
    type: oauth2
    authorizationUrl: 'https://public.agaveapi.co/authorization'
    flow: implicit
    scopes:
      PRODUCTION: catchall scope for all core apis
  agaveApplication:
    type: oauth2
    tokenUrl: 'https://public.agaveapi.co/token'
    flow: application
    scopes:
      PRODUCTION: catchall scope for all core apis
  agavePassword:
    type: oauth2
    tokenUrl: 'https://public.agaveapi.co/token'
    flow: password
    scopes:
      PRODUCTION: catchall scope for all core apis
  agaveBasic:
    type: basic
    description: HTTP Basic auth used when generating clients applications
security:
  - agaveImplicit: 
    - PRODUCTION
  - agaveApplication: 
    - PRODUCTION
  - agavePassword:
    - PRODUCTION
parameters:
  filter:
    name: filter
    in: query
    required: false
    x-is-map: false
    default: '*'
    type: string
    description: A comma-separated list of fields in the response objects to return. This allows developers to create their own response objects
  naked:
    name: naked
    in: query
    required: true
    x-is-map: false
    default: true
    type: boolean
    description: If true, the response wrapper is stripped and the raw object is returned.
  limit:
    name: limit
    in: query
    required: false
    x-is-map: false
    default: 100
    type: integer
    format: int64
    description: The maximum number of results returned from this query
  offset:
    name: offset
    in: query
    required: false
    x-is-map: false
    default: 0
    type: integer
    format: int64
    description: The number of results skipped in the result set returned from this query
  order:
    name: order
    in: query
    required: false
    x-is-map: false
    default: ASC
    type: string
    enum:
      - ASC
      - ASCENDING
      - DESC
      - DESCENDING
    description: The order in which to sort the response results.
  orderBy:
    name: orderBy
    in: query
    required: false
    x-is-map: false
    type: string
    description: The field in the response object by which to sort the results. The field specified does not need to be included in the objects returned, but must be a valid field of the full response object.
paths:
  /clients/v2/:
    get:
      description: List existing clients
      tags:
        - clients
      operationId: listClients
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/MultipleClientResponse'
      security:
        - agaveBasic: []
    post:
      description: Create a new client
      tags:
        - clients
      operationId: addClient
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          x-is-map: false
          description: The api client to create
          schema:
            $ref: '#/definitions/ClientRequest'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/SingleClientResponse'
        '400':
          description: Raised if a user supplies an invalid username format
        '403':
          description: Failed to authenticate the user
        '404':
          description: The user profile cannot be found
        default:
          description: The service was unable to query the profile database
      security:
        - agaveBasic: []
  '/clients/v2/{clientName}':
    get:
      description: Returns a detailed description of a named client.
      tags:
        - clients
      operationId: getClient
      produces:
        - application/json
      parameters:
        - name: clientName
          in: path
          required: true
          x-is-map: false
          type: string
          description: The name of the client to be deleted
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/MultipleClientResponse'
      security:
        - agaveBasic: []
    delete:
      description: Immediately deletes this client and renders the API keys useless.
      tags:
        - clients
      operationId: deleteClient
      produces:
        - application/json
      parameters:
        - name: clientName
          in: path
          required: true
          x-is-map: false
          type: string
          description: The name of the client to be deleted
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/EmptyClientResponse'
      security:
        - agaveBasic: []
  '/clients/v2/{clientName}/subscriptions':
    get:
      description: Lists all APIs to which the client is subscribed
      tags:
        - clients
      operationId: listClientApiSubscriptions
      produces:
        - application/json
      parameters:
        - name: clientName
          in: path
          required: true
          x-is-map: false
          type: string
          description: The name of the client to be deleted
        - name: limit
          in: query
          required: false
          x-is-map: false
          default: 100
          type: integer
          format: int64
          description: The maximum number of results returned from this query
        - name: offset
          in: query
          required: false
          x-is-map: false
          default: 0
          type: integer
          format: int64
          description: The number of results skipped in the result set returned from this query
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/MultipleSubscriptionResponse'
      security:
        - agaveBasic: []
    post:
      description: Add a new API subscription to the given client
      tags:
        - clients
      operationId: addClientAPISubscription
      produces:
        - application/json
      parameters:
        - name: clientName
          in: path
          required: true
          x-is-map: false
          type: string
          description: The name of the client to be subscribe to this api
        - name: body
          in: body
          required: true
          x-is-map: false
          description: The api client to create
          schema:
            $ref: '#/definitions/ClientSubscriptionRequest'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/SingleSubscriptionResponse'
      security:
        - agaveBasic: []
    delete:
      description: Unsubscribe the client from all APIs
      tags:
        - clients
      operationId: clearClientAPISubscriptions
      produces:
        - application/json
      parameters:
        - name: clientName
          in: path
          required: true
          x-is-map: false
          type: string
          description: The name of the client to be deleted
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/EmptyClientResponse'
      security:
        - agaveBasic: []
  /apps/v2/:
    get:
      summary: List apps
      description: Get a list of available applications.
      tags:
        - apps
      operationId: listApps
      produces:
        - application/json
      parameters:
        - name: public
          in: query
          required: false
          x-is-map: false
          type: boolean
          description: 'Whether to return only public apps. (Acceptable values are: "true", "false")'
        - name: name
          in: query
          required: false
          x-is-map: false
          type: string
          description: The name of the app
        - name: executionSystem
          in: query
          required: false
          x-is-map: false
          type: string
          description: The execution system of the system
        - name: tags
          in: query
          required: false
          x-is-map: false
          type: string
          description: A free text tag associated with an app
        - name: filter
          in: query
          required: false
          x-is-map: false
          default: '*'
          type: string
          description: A comma-separated list of fields in the response objects to return. This allows developers to create their own response objects
        - name: naked
          in: query
          required: false
          x-is-map: false
          default: true
          type: string
          description: If true, the response wrapper is stripped and the raw object is returned
        - name: limit
          in: query
          required: false
          x-is-map: false
          default: 100
          type: integer
          format: int64
          description: The maximum number of results returned from this query
        - name: offset
          in: query
          required: false
          x-is-map: false
          default: 0
          type: integer
          format: int64
          description: The number of results skipped in the result set returned from this query
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/ApplicationSummary'
    post:
      description: Register and update new applications.
      tags:
        - apps
      operationId: addApp
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: false
          x-is-map: false
          description: 'The description of the app to add or update. '
          schema:
            $ref: '#/definitions/Application'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Application'
  '/apps/v2/{appId}':
    get:
      description: Get details of an application by its unique id.
      tags:
        - apps
      operationId: getAppDetails
      produces:
        - application/json
      parameters:
        - name: appId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the application. The application id is made up of the name and version separated by a dash.
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Application'
    put:
      description: Edit an application.
      tags:
        - apps
      operationId: invokeAppAction
      produces:
        - application/json
      parameters:
        - name: appId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the application. The application id is made up of the name and version separated by a dash.
        - name: body
          in: body
          required: true
          x-is-map: false
          description: The operation to perform.
          schema:
            $ref: '#/definitions/ApplicationAction'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Application'
    post:
      description: Update an application.
      tags:
        - apps
      operationId: updateApp
      produces:
        - application/json
      parameters:
        - name: appId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the application. The application id is made up of the name and version separated by a dash.
        - name: body
          in: body
          required: true
          x-is-map: false
          description: 'The description of the app to add or update. '
          schema:
            $ref: '#/definitions/Application'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Application'
    delete:
      description: Deletes an application.
      tags:
        - apps
      operationId: deleteApp
      produces:
        - application/json
      parameters:
        - name: appId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the application. The application id is made up of the name and version separated by a dash.
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
  '/apps/v2/{appId}/pems':
    get:
      description: Get the permission for this application.
      tags:
        - apps
      operationId: listAppPermissions
      produces:
        - application/json
      parameters:
        - name: appId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the application. The application id is made up of the name and version separated by a dash.
        - name: filter
          in: query
          required: false
          x-is-map: false
          default: '*'
          type: string
          description: A comma-separated list of fields in the response objects to return. This allows developers to create their own response objects
        - name: naked
          in: query
          required: false
          x-is-map: false
          default: true
          type: string
          description: If true, the response wrapper is stripped and the raw object is returned
        - name: limit
          in: query
          required: false
          x-is-map: false
          default: 100
          type: integer
          format: int64
          description: The maximum number of results returned from this query
        - name: offset
          in: query
          required: false
          x-is-map: false
          default: 0
          type: integer
          format: int64
          description: The number of results skipped in the result set returned from this query
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/Permission'
    post:
      description: Grant a user permission for an application.
      tags:
        - apps
      operationId: addAppPermission
      produces:
        - application/json
      parameters:
        - name: appId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the application. The application id is made up of the name and version separated by a dash.
        - name: body
          in: body
          required: true
          x-is-map: false
          description: 'The permission add or update. '
          schema:
            $ref: '#/definitions/Permission'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Permission'
    delete:
      description: Deletes all permissions on an application.
      tags:
        - apps
      operationId: clearAppPermissions
      produces:
        - application/json
      parameters:
        - name: appId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the application. The application id is made up of the name and version separated by a dash.
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
  '/apps/v2/{appId}/pems/{username}':
    get:
      description: Get a specific user permission for an application.
      tags:
        - apps
      operationId: getAppPermission
      produces:
        - application/json
      parameters:
        - name: appId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the application. The application id is made up of the name and version separated by a dash.
        - name: username
          in: path
          required: true
          x-is-map: false
          type: string
          description: The username of the api user associated with the permission.
        - name: filter
          in: query
          required: false
          x-is-map: false
          default: '*'
          type: string
          description: A comma-separated list of fields in the response objects to return. This allows developers to create their own response objects
        - name: naked
          in: query
          required: false
          x-is-map: false
          default: true
          type: string
          description: If true, the response wrapper is stripped and the raw object is returned
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Permission'
    post:
      description: Add or update a user permission for an application.
      tags:
        - apps
      operationId: updateAppPermission
      produces:
        - application/json
      parameters:
        - name: appId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the application. The application id is made up of the name and version separated by a dash.
        - name: username
          in: path
          required: true
          x-is-map: false
          type: string
          description: The username of the api user associated with the permission
        - name: body
          in: body
          required: true
          x-is-map: false
          description: 'The permission add or update. '
          schema:
            $ref: '#/definitions/Permission'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Permission'
    delete:
      description: Deletes all permissions for the given user on an application.
      tags:
        - apps
      operationId: deleteAppPermission
      produces:
        - application/json
      parameters:
        - name: appId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the application. The application id is made up of the name and version separated by a dash.
        - name: username
          in: path
          required: true
          x-is-map: false
          type: string
          description: The username of the api user associated with the permission
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
  '/apps/v2/{appId}/form':
    get:
      description: Get a submission form for the named application.
      tags:
        - apps
      operationId: getAppSubmissionForm
      produces:
        - application/json
      parameters:
        - name: appId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The app for which to create the form
        - name: naked
          in: query
          required: false
          x-is-map: false
          default: true
          type: string
          description: If true, the response wrapper is stripped and the raw object is returned
      responses:
        '200':
          description: ''
          schema:
            type: string
  '/files/v2/media/{filePath}':
    get:
      description: Download a file from the default storage location of the user.
      tags:
        - files
      operationId: downloadFileItemOnDefaultSystem
      produces:
        - application/octet-stream
      parameters:
        - in: path
          name: filePath
          required: true
          type: string
          description: The path of the file relative to the default storage location of the user
        - name: force
          in: query
          required: false
          x-is-map: false
          default: false
          type: boolean
          description: Boolean flag to indicate whether the Content-Disposition header should be set to force browser file download.
      responses:
        '200':
          description: ''
    put:
      description: Perform an action on a file or folder.
      tags:
        - files
      operationId: invokeFileActionOnDefaultSystem
      produces:
        - application/json
      parameters:
        - name: filePath
          in: path
          required: true
          x-is-map: false
          type: string
          description: The path of the file relative to the default storage location of the user.
        - name: body
          in: body
          required: true
          description: The operation to perform
          schema:
            $ref: '#/definitions/FileAction'
        - name: naked
          in: query
          required: false
          x-is-map: false
          default: true
          type: string
          description: If true, the response wrapper is stripped and the raw object is returned
      responses:
        '200':
          description: ''
          schema:
            type: object
    post:
      description: Import file item from a remote URL to the target system
      tags:
        - files
      operationId: importFileItemToDefaultSystem
      produces:
        - application/json
      parameters:
        - name: filePath
          in: path
          required: true
          x-is-map: false
          type: string
          description: The relative or absolute path where the file item should be imported
        - name: body
          in: body
          required: true
          x-is-map: false
          description: The import request
          schema:
            $ref: '#/definitions/FileImportRequest'
        - name: naked
          in: query
          required: false
          x-is-map: false
          default: true
          type: string
          description: If true, the response wrapper is stripped and the raw object is returned
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/FileInfo'
    delete:
      description: 'Deletes a file or folder on default storage system of the user'
      tags:
        - files
      operationId: deleteFileItemOnDefaultSystem
      produces:
        - application/json
      parameters:
        - name: filePath
          in: path
          required: true
          x-is-map: false
          type: string
          description: The path of the file relative to the default storage location of the user.
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
  '/files/v2/media/system/{systemId}/{filePath}':
    get:
      description: Download a file from the given system
      tags:
        - files
      operationId: downloadFileItem
      produces:
        - application/octet-stream
      parameters:
        - name: systemId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The unique id of the system on which the data resides.
        - name: filePath
          in: path
          required: true
          x-is-map: false
          type: string
          description: The path of the file relative to the default storage location of the user.
        - name: force
          in: query
          required: false
          x-is-map: false
          default: false
          type: boolean
          description: Boolean flag to indicate whether the Content-Disposition header should be set to force a browser download.
      responses:
        '200':
          description: ''
    put:
      description: Perform an action on a file or folder.
      tags:
        - files
      operationId: invokeFileItemAction
      produces:
        - application/json
      parameters:
        - name: systemId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The unique id of the system on which the data resides.
        - name: filePath
          in: path
          required: true
          x-is-map: true
          type: string
          description: The path of the file relative to the default storage location of the user.
        - name: body
          in: body
          required: true
          x-is-map: false
          description: 'The operation to perform. '
          schema:
            $ref: '#/definitions/FileAction'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            type: object
    post:
      description: Import file item from a remote URL to the target system
      tags:
        - files
      operationId: importFileItem
      produces:
        - application/json
      parameters:
        - name: systemId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the system.
        - name: filePath
          in: path
          required: true
          x-is-map: false
          type: string
          description: The relative or absolute path where the file item should be imported
        - name: body
          in: body
          required: true
          x-is-map: false
          description: The import request
          schema:
            $ref: '#/definitions/FileImportRequest'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/FileInfo'
    delete:
      description: Deletes a file or folder at the specified path on the specified remote system.
      tags:
        - files
      operationId: deleteFileItem
      produces:
        - application/json
      parameters:
        - name: systemId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The unique id of the system on which the data resides.
        - name: filePath
          in: path
          required: true
          x-is-map: false
          type: string
          description: The path of the file relative to the default storage location of the user.
        - name: naked
          in: query
          required: false
          x-is-map: false
          default: true
          type: string
          description: If true, the response wrapper is stripped and the raw object is returned
      responses:
        '200':
          description: ''
  '/files/v2/listings/system/{systemId}/{filePath}':
    get:
      description: Get a remote directory listing on a specific system.
      tags:
        - files
      operationId: listFileItems
      produces:
        - application/json
      parameters:
        - name: systemId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The unique id of the system on which the data resides.
        - name: filePath
          in: path
          required: true
          x-is-map: false
          type: string
          description: The path of the file relative to the default storage location of the user.
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
        - name: limit
          in: query
          required: false
          x-is-map: false
          default: 100
          type: integer
          format: int64
          description: The maximum number of results returned from this query
        - name: offset
          in: query
          required: false
          x-is-map: false
          default: 0
          type: integer
          format: int64
          description: The number of results skipped in the result set returned from this query
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/FileInfo'
  '/files/v2/pems/{filePath}':
    get:
      description: List all the share permissions for a file or folder.
      tags:
        - files
      operationId: listFileItemPermissionsOnDefaultSystem
      produces:
        - application/json
      parameters:
        - name: filePath
          in: path
          required: true
          x-is-map: false
          type: string
          description: The path of the file relative to the default storage location of the user.
        - name: limit
          in: query
          required: false
          x-is-map: false
          default: 100
          type: integer
          format: int64
          description: The maximum number of results returned from this query
        - name: offset
          in: query
          required: false
          x-is-map: false
          default: 0
          type: integer
          format: int64
          description: The number of results skipped in the result set returned from this query
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/FilePermission'
    post:
      description: Update permissions for a single user on their default storage system.
      tags:
        - files
      operationId: updateFileItemPermissionsOnDefaultSystem
      produces:
        - application/json
      parameters:
        - name: filePath
          in: path
          required: true
          x-is-map: false
          type: string
          description: The path of the file relative to the default storage location of the user.
        - name: body
          in: body
          required: true
          x-is-map: false
          description: 'The permission add or update. '
          schema:
            $ref: '#/definitions/FilePermissionRequest'
        - name: filePath
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/FilePermission'
  '/files/v2/pems/system/{systemId}/{filePath}':
    get:
      description: List all the share permissions for a file or folder.
      tags:
        - files
      operationId: listFileItemPermissions
      produces:
        - application/json
      parameters:
        - name: filePath
          in: path
          required: true
          x-is-map: false
          type: string
          description: The path of the file relative to the default storage location of the user.
        - name: limit
          in: query
          required: false
          x-is-map: false
          default: 100
          type: integer
          format: int64
          description: The maximum number of results returned from this query
        - name: offset
          in: query
          required: false
          x-is-map: false
          default: 0
          type: integer
          format: int64
          description: The number of results skipped in the result set returned from this query
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
        - name: systemId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The system id
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/FilePermission'
    post:
      description: Update permissions for a single user.
      tags:
        - files
      operationId: updateFileItemPermission
      produces:
        - application/json
      parameters:
        - name: filePath
          in: path
          required: true
          x-is-map: false
          type: string
          description: The path of the file relative to the default storage location of the user.
        - name: systemId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the system on which the file resides
        - name: body
          in: body
          required: true
          x-is-map: false
          description: The updated permission value
          schema:
            $ref: '#/definitions/PermissionRequest'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/FilePermission'
    delete:
      description: Deletes all permissions on a file except those of the owner.
      tags:
        - files
      operationId: clearFileItemPermissions
      produces:
        - application/json
      parameters:
        - name: filePath
          in: path
          required: true
          x-is-map: false
          type: string
          description: The path of the file relative to the default storage location of the user.
        - name: systemId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the system on which the file item lives.
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
  /jobs/v2/:
    get:
      description: Get a list of jobs the authenticated user had submitted.
      tags:
        - jobs
      operationId: listJobs
      produces:
        - application/json
      parameters:
        - name: appId
          in: query
          required: false
          x-is-map: false
          type: string
          description: The id of the app run by the job.
        - name: archive
          in: query
          required: false
          x-is-map: false
          default: 'true'
          type: string
          description: 'Boolean flag stating whether the job output was archived. (Acceptable values are: "true", "false")'
        - name: archivePath
          in: query
          required: false
          x-is-map: false
          type: string
          description: Path on the archive system where the job output was archived if the archive flag was true.
        - name: archiveSystem
          in: query
          required: false
          x-is-map: false
          type: string
          description: The id of the system where the job output was archived if the archive flag was true.
        - name: batchQueue
          in: query
          required: false
          x-is-map: false
          type: string
          description: The system queue in which the job ran.
        - name: executionSystem
          in: query
          required: false
          x-is-map: false
          type: string
          description: The execution system where the job ran.
        - name: id
          in: query
          required: false
          x-is-map: false
          type: string
          description: The id of the job.
        - name: inputs
          in: query
          required: false
          x-is-map: false
          type: string
          description: 'The job inputs. Note, this is a partial text search.'
        - name: localId
          in: query
          required: false
          x-is-map: false
          type: string
          description: The local job id of the job on the execution system.
        - name: maxRuntime
          in: query
          required: false
          x-is-map: false
          type: string
          description: 'The maximum run time of the job in HH:mm:ss format.'
        - name: memoryPerNode
          in: query
          required: false
          x-is-map: false
          type: string
          description: The memory requested by the job specified in GB.
        - name: name
          in: query
          required: false
          x-is-map: false
          type: string
          description: The name of the job.
        - name: nodeCount
          in: query
          required: false
          x-is-map: false
          type: integer
          format: int64
          description: The number of nodes requested for the job.
        - name: outputPath
          in: query
          required: false
          x-is-map: false
          type: string
          description: The remote work directory path of the job.
        - name: parameters
          in: query
          required: false
          x-is-map: false
          type: string
          description: 'The job parameters. Note, this is a partial text search.'
        - name: processorsPerNode
          in: query
          required: false
          x-is-map: false
          type: integer
          format: int64
          description: The number of processors per node requested by the job.
        - name: retries
          in: query
          required: false
          x-is-map: false
          type: integer
          format: int64
          description: The number of retry attempts made on this job.
        - name: startTime
          in: query
          required: false
          x-is-map: false
          type: string
          description: The date the job began running. Results are rounded by day. You may specify using YYYY-MM-DD format or free form timeframes such as 'yesterday' or '3 days ago'.
        - name: status
          in: query
          required: false
          x-is-map: false
          enum:
            - PENDING
            - STAGING_INPUTS
            - CLEANING_UP
            - ARCHIVING
            - STAGING_JOB
            - FINISHED
            - KILLED
            - FAILED
            - STOPPED
            - RUNNING
            - PAUSED
            - QUEUED
            - SUBMITTING
            - STAGED
            - PROCESSING_INPUTS
            - ARCHIVING_FINISHED
            - ARCHIVING_FAILED
            - HEARTBEAT
          type: string
          description: The job status.
        - name: submitTime
          in: query
          required: false
          x-is-map: false
          type: string
          description: The date the job was submitted to the remote execution system to run. Results are rounded by day. You may specify using YYYY-MM-DD format or free form timeframes such as 'yesterday' or '3 days ago'.
        - name: visible
          in: query
          required: false
          x-is-map: false
          default: 'true'
          type: string
          description: 'Boolean flag indicating whether or not to show deleted jobs. Defaults to false. (Acceptable values are: "true", "false")'
        - name: limit
          in: query
          required: false
          x-is-map: false
          type: integer
          format: int64
          description: Boolean flag indicating whether or not to show deleted jobs. Defaults to false.
        - name: offset
          in: query
          required: false
          x-is-map: false
          type: integer
          format: int64
          description: Boolean flag indicating whether or not to show deleted jobs. Defaults to false.
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/Job'
    post:
      description: Submit a new job request.
      tags:
        - jobs
      operationId: submitJob
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          x-is-map: false
          description: 'The JSON description of the job to submit. '
          schema:
            $ref: '#/definitions/JobRequest'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Job'
  '/jobs/v2/{jobId}':
    get:
      description: Get details of the job with the specific job id.
      tags:
        - jobs
      operationId: getJobDetails
      produces:
        - application/json
      parameters:
        - name: jobId
          in: path
          required: true
          x-is-map: false
          type: integer
          format: int64
          description: The id of the job.
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Job'
    post:
      description: Resubmits the job with the given job id as a new job with a unique id.
      tags:
        - jobs
      operationId: resubmitJob
      produces:
        - application/json
      parameters:
        - name: jobId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the job to resubmit
        - name: body
          in: body
          required: true
          x-is-map: false
          description: The resubmit action request
          schema:
            $ref: '#/definitions/JobResubmitAction'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Job'
    delete:
      description: 'Deletes a job from history of the user'
      tags:
        - jobs
      operationId: deleteJob
      produces:
        - application/json
      parameters:
        - name: jobId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the job.
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
  '/jobs/v2/{jobId}/pems':
    get:
      description: Get the permissions granted for this job.
      tags:
        - jobs
      operationId: listJobPermissions
      produces:
        - application/json
      parameters:
        - name: jobId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the job.
        - name: limit
          in: query
          required: false
          x-is-map: false
          default: 100
          type: integer
          format: int64
          description: The maximum number of results returned from this query
        - name: offset
          in: query
          required: false
          x-is-map: false
          default: 0
          type: integer
          format: int64
          description: The number of results to skip in the result set for this query
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/Permission'
    post:
      description: Add a user permission for the given job.
      tags:
        - jobs
      operationId: addJobPermission
      produces:
        - application/json
      parameters:
        - name: jobId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the job.
        - name: body
          in: body
          required: true
          x-is-map: false
          description: 'The permission add or update. '
          schema:
            $ref: '#/definitions/Permission'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Permission'
    delete:
      description: Deletes all permissions on an job.
      tags:
        - jobs
      operationId: clearJobPermissions
      produces:
        - application/json
      parameters:
        - name: jobId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the job.
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
  '/jobs/v2/{jobId}/pems/{username}':
    get:
      description: Get a specific user permission for a job.
      tags:
        - jobs
      operationId: getJobPermission
      produces:
        - application/json
      parameters:
        - name: jobId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the job.
        - name: username
          in: path
          required: true
          x-is-map: false
          type: string
          description: The username of the api user associated with the permission.
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Permission'
    post:
      description: Update a user permission for the given job and username
      tags:
        - jobs
      operationId: updateJobPermission
      produces:
        - application/json
      parameters:
        - name: jobId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the job for which the permissions will be updated
        - name: username
          in: path
          required: true
          x-is-map: false
          type: string
          description: The user for whom the permission will be udpated
        - name: body
          in: body
          required: true
          x-is-map: false
          description: The permission to update
          schema:
            $ref: '#/definitions/Permission'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Permission'
    delete:
      description: Deletes all permissions for the given user on an job.
      tags:
        - jobs
      operationId: deleteJobPermission
      produces:
        - application/json
      parameters:
        - name: jobId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the job for which to delete the user permissions.
        - name: username
          in: path
          required: true
          x-is-map: false
          type: string
          description: The username for whom to delete permissions
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
  '/jobs/v2/{jobId}/status':
    get:
      description: Get the status of the job.
      tags:
        - jobs
      operationId: getJobStatus
      produces:
        - application/json
      parameters:
        - name: jobId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the job.
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JobStatusSummary'
  '/jobs/v2/{jobId}/outputs/listings/{filePath}':
    get:
      description: List the output folder for a job.
      tags:
        - jobs
      operationId: listJobOutputs
      produces:
        - application/json
      parameters:
        - name: jobId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the job.
        - name: filePath
          in: path
          required: true
          x-is-map: false
          type: string
          description: The path to an output file or folder relative to the job output directory. This resource will follow data around as it moves from the execution system to archival storage.
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
        - name: limit
          in: query
          required: false
          x-is-map: false
          default: 100
          type: integer
          format: int64
          description: The maximum number of results returned from this query
        - name: offset
          in: query
          required: false
          x-is-map: false
          default: 0
          type: integer
          format: int64
          description: The number of results skipped in the result set returned from this query
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/FileInfo'
  /meta/v2/data:
    get:
      description: List and/or search metadata.
      tags:
        - meta
      operationId: listMetadata
      produces:
        - application/json
      parameters:
        - name: q
          in: query
          required: true
          x-is-map: false
          type: string
          description: The query to perform. Traditional MongoDB queries are supported
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
        - name: limit
          in: query
          required: false
          x-is-map: false
          default: 100
          type: integer
          format: int64
          description: The maximum number of results returned from this query
        - name: offset
          in: query
          required: false
          x-is-map: false
          default: 0
          type: integer
          format: int64
          description: The number of results skipped in the result set returned from this query
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/Metadata'
        '400':
          description: Raised if a user does not supply a UUID or supplies an invalid JSON query
        '401':
          description: Raised if the user is not authorized.
        '403':
          description: Failed to authenticate the user
        '404':
          description: The specified metadata cannot be found
        default:
          description: The service was unable to query the metadata database
    post:
      description: Update or Add new Metadata.
      tags:
        - meta
      operationId: addMetadata
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          x-is-map: false
          description: The metadata to add.
          schema:
            $ref: '#/definitions/Metadata'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Metadata'
        '400':
          description: Raised if a user supplies an invalid form
        '401':
          description: Raised if the user is not authorized.
        '403':
          description: Failed to authenticate the user
        default:
          description: The service was unable to query the metadata database
  '/meta/v2/data/{uuid}':
    get:
      description: Retrieve Metadata.
      tags:
        - meta
      operationId: getMetadata
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          required: true
          x-is-map: false
          type: string
          description: The uuid of the metadata item
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Metadata'
        '400':
          description: Raised if a user does not supply a UUID
        '401':
          description: Raised if the user is not authorized.
        '403':
          description: Failed to authenticate the user
        '404':
          description: The specified metadata cannot be found
        default:
          description: The service was unable to query the metadata database
    post:
      description: Update or Add new Metadata.
      tags:
        - meta
      operationId: updateMetadata
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          required: true
          x-is-map: false
          type: string
          description: The uuid of the metadata item
        - name: body
          in: body
          required: true
          x-is-map: false
          description: The metadata to update.
          schema:
            $ref: '#/definitions/Metadata'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Metadata'
        '400':
          description: Raised if a user supplies an invalid form
        '401':
          description: Raised if the user is not authorized.
        '403':
          description: Failed to authenticate the user
        default:
          description: The service was unable to query the metadata database
    delete:
      description: Remove Metadata from the system.
      tags:
        - meta
      operationId: deleteMetadata
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          required: true
          x-is-map: false
          type: string
          description: The uuid of the metadata item
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
        '400':
          description: Raised if a user supplies no UUID
        '401':
          description: Raised if the user is not authorized.
        '403':
          description: Failed to authenticate the user
        default:
          description: The service was unable to query the metadata database
  /meta/v2/schemas:
    get:
      description: List and query Metadata Schemata.
      tags:
        - meta
      operationId: listMetadataSchema
      produces:
        - application/json
      parameters:
        - name: q
          in: query
          required: true
          x-is-map: false
          type: string
          description: A valid query object defining the search parameters.
        - name: limit
          in: query
          required: false
          x-is-map: false
          default: 100
          type: integer
          format: int64
          description: The maximum number of results returned from this query
        - name: offset
          in: query
          required: false
          x-is-map: false
          default: 0
          type: integer
          format: int64
          description: The number of results skipped in the result set returned from this query
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/MetadataSchema'
        '400':
          description: Raised if a user does not supply a Schema UUID
        '403':
          description: Failed to authenticate the user
        default:
          description: The service was unable to query the schema database
    post:
      description: Add a new Metadata Schema.
      tags:
        - meta
      operationId: addMetadataSchema
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          x-is-map: false
          description: A valid JSON Schema object
          schema:
            $ref: '#/definitions/MetadataSchema'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/MetadataSchema'
        '400':
          description: Raised if a user supplies an invalid form or JSON schema
        '401':
          description: Raised if the user is not authorized.
        '403':
          description: Failed to authenticate the user
        default:
          description: The service was unable to query the schema database
  '/meta/v2/schemas/{uuid}':
    get:
      description: Retrieve Metadata Schemata.
      tags:
        - meta
      operationId: getMetadataSchema
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          required: true
          x-is-map: false
          type: string
          description: The uuid of the metadata schema item
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/MetadataSchema'
        '400':
          description: Raised if a user does not supply a Schema UUID
        '403':
          description: Failed to authenticate the user
        default:
          description: The service was unable to query the schema database
    post:
      description: Update an existing Metadata Schema.
      tags:
        - meta
      operationId: updateMetadataSchema
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          required: true
          x-is-map: false
          type: string
          description: The uuid of the metadata schema item
        - name: body
          in: body
          required: true
          x-is-map: false
          description: A valid JSON Schema object
          schema:
            $ref: '#/definitions/Permission'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/MetadataSchema'
        '400':
          description: Raised if a user supplies an invalid form or JSON schema
        '401':
          description: Raised if the user is not authorized.
        '403':
          description: Failed to authenticate the user
        default:
          description: The service was unable to query the schema database
    delete:
      description: Remove Metadata Schema from the system.
      tags:
        - meta
      operationId: deleteMetadataSchema
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          required: true
          x-is-map: false
          type: string
          description: The uuid of the metadata schema item
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
        '400':
          description: Raised if a user does not supply a Schema UUID
        '401':
          description: Raised if the user is not authorized.
        '403':
          description: Failed to authenticate the user
        default:
          description: The service was unable to query the schema database
  '/meta/v2/data/{uuid}/pems':
    get:
      description: Get the permission ACL for this metadata.
      tags:
        - meta
      operationId: listMetadataPermissions
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          required: true
          x-is-map: false
          type: string
          description: The uuid of the metadata item
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
        - name: limit
          in: query
          required: false
          x-is-map: false
          default: 100
          type: integer
          format: int64
          description: The maximum number of results returned from this query
        - name: offset
          in: query
          required: false
          x-is-map: false
          default: 0
          type: integer
          format: int64
          description: The number of results skipped in the result set returned from this query
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Permission'
        '400':
          description: Raised if a metadata UUID is not supplied or is invalid.
        '403':
          description: Failed to authenticate the user or the user is not authorized to access the specified metadata.
        '404':
          description: The specified metadata cannot be found
        default:
          description: The service was unable to query the metadata database
    post:
      description: Add a user permission for the given metadata.
      tags:
        - meta
      operationId: addMetadataPermission
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          required: true
          x-is-map: false
          type: string
          description: The uuid of the metadata item
        - name: body
          in: body
          required: true
          x-is-map: false
          description: The metadata permission to update.
          schema:
            $ref: '#/definitions/Permission'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Permission'
        '400':
          description: Raised if a valid metadata UUID is not supplied or if the form is invalid.
        '403':
          description: Failed to authenticate the user or the user is not authorized to access the specified metadata.
        '404':
          description: The specified user cannot be found
        default:
          description: The service was unable to query the metadata database
    delete:
      description: Deletes all permissions on the given metadata.
      tags:
        - meta
      operationId: clearMetadataPermissions
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          required: true
          x-is-map: false
          type: string
          description: The uuid of the metadata item
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
        '400':
          description: Raised if a metadata UUID is not supplied or is invalid.
        '403':
          description: Failed to authenticate the user or the user is not authorized to access the specified metadata.
        default:
          description: The service was unable to query the metadata database
  '/meta/v2/data/{uuid}/pems/{username}':
    get:
      description: Get the user permission for this metadata.
      tags:
        - meta
      operationId: getMetadataPermission
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          required: true
          x-is-map: false
          type: string
          description: The uuid of the metadata item
        - name: username
          in: path
          required: true
          x-is-map: false
          type: string
          description: The username of the permission owner
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Permission'
        '400':
          description: Raised if a metadata UUID is not supplied or is invalid.
        '403':
          description: Failed to authenticate the user or the user is not authorized to access the specified metadata.
        '404':
          description: The specified metadata cannot be found
        default:
          description: The service was unable to query the metadata database
    post:
      description: Update a user permission for the given metadata.
      tags:
        - meta
      operationId: updateMetadataPermission
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          required: true
          x-is-map: false
          type: string
          description: The uuid of the metadata item
        - name: username
          in: path
          required: true
          x-is-map: false
          type: string
          description: The username of the permission owner
        - name: body
          in: body
          required: true
          x-is-map: false
          description: The metadata permission to update.
          schema:
            $ref: '#/definitions/Permission'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Permission'
        '400':
          description: Raised if a valid metadata UUID is not supplied or if the form is invalid.
        '403':
          description: Failed to authenticate the user or the user is not authorized to access the specified metadata.
        '404':
          description: The specified user cannot be found
        default:
          description: The service was unable to query the metadata database
    delete:
      description: Removes user permissions for a user on a given metadata resource.
      tags:
        - meta
      operationId: deleteMetadataPermission
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          required: true
          x-is-map: false
          type: string
          description: The uuid of the metadata item
        - name: username
          in: path
          required: true
          x-is-map: false
          type: string
          description: The username of the permission owner
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
        '400':
          description: Raised if a metadata UUID is not supplied or is invalid.
        '403':
          description: Failed to authenticate the user or the user is not authorized to access the specified metadata.
        default:
          description: The service was unable to query the metadata database
  '/meta/v2/schemas/{uuid}/pems':
    get:
      description: Get the permission for this schema.
      tags:
        - meta
      operationId: listMetadataSchemaPermissions
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          required: true
          x-is-map: false
          type: string
          description: The uuid of the metadata schema item
        - name: limit
          in: query
          required: false
          x-is-map: false
          default: 100
          type: integer
          format: int64
          description: The maximum number of results returned from this query
        - name: offset
          in: query
          required: false
          x-is-map: false
          default: 0
          type: integer
          format: int64
          description: The number of results skipped in the result set returned from this query
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/Permission'
        '400':
          description: Raised if a schema UUID is not supplied or is invalid.
        '403':
          description: Failed to authenticate the user or the user is not authorized to access the specified schema.
        '404':
          description: The specified schema cannot be found
        default:
          description: The service was unable to query the metadata schema database
    post:
      description: 'Add a user permission for the given schema.'
      tags:
        - meta
      operationId: addMetadataSchemaPermission
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          required: true
          x-is-map: false
          type: string
          description: The uuid of the metadata schema item
        - name: body
          in: body
          required: true
          x-is-map: false
          description: The schema permission to update.
          schema:
            $ref: '#/definitions/Permission'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Permission'
        '400':
          description: Raised if a valid schema UUID is not supplied or if the form is invalid.
        '403':
          description: Failed to authenticate the user or the user is not authorized to access the specified schema.
        '404':
          description: The specified user cannot be found
        default:
          description: The service was unable to query the metadata schema database
    delete:
      description: Deletes all permissions on the given schema.
      tags:
        - meta
      operationId: clearMetadataSchemaPermissions
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          required: true
          x-is-map: false
          type: string
          description: The uuid of the metadata schema item
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
        '400':
          description: Raised if a schema UUID is not supplied or is invalid.
        '403':
          description: Failed to authenticate the user or the user is not authorized to access the specified schema.
        default:
          description: The service was unable to query the metadata schema database
  '/meta/v2/schemas/{uuid}/pems/{username}':
    get:
      description: Get the user permission for this schema.
      tags:
        - meta
      operationId: getMetadataSchemaPermission
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          required: true
          x-is-map: false
          type: string
          description: The uuid of the metadata schema item
        - name: username
          in: path
          required: true
          x-is-map: false
          type: string
          description: The username of the permission owner
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Permission'
        '400':
          description: Raised if a schema UUID is not supplied or is invalid.
        '403':
          description: Failed to authenticate the user or the user is not authorized to access the specified schema.
        '404':
          description: The specified schema cannot be found
        default:
          description: The service was unable to query the metadata schema database
    post:
      description: Add or update a user permission for the given metadata schema.
      tags:
        - meta
      operationId: updateMetadataSchemaPermission
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          required: true
          x-is-map: false
          type: string
          description: The uuid of the metadata schema item
        - name: username
          in: path
          required: true
          x-is-map: false
          type: string
          description: The username of the permission owner
        - name: body
          in: body
          required: true
          x-is-map: false
          description: The schema permission to update.
          schema:
            $ref: '#/definitions/Permission'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Permission'
        '400':
          description: Raised if a valid schema UUID is not supplied or if the form is invalid.
        '403':
          description: Failed to authenticate the user or the user is not authorized to access the specified schema.
        '404':
          description: The specified user cannot be found
        default:
          description: The service was unable to query the metadata schema database
    delete:
      description: Deletes all metadata schema permissions on the given metadata.
      tags:
        - meta
      operationId: deleteSchemaPermission
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          required: true
          x-is-map: false
          type: string
          description: The uuid of the metadata schema item
        - name: username
          in: path
          required: true
          x-is-map: false
          type: string
          description: The username of the permission owner
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
        '400':
          description: Raised if a schema UUID is not supplied or is invalid.
        '403':
          description: Failed to authenticate the user or the user is not authorized to access the specified schema.
        default:
          description: The service was unable to query the metadata schema database
  /monitors/v2/:
    get:
      description: Retrieve Monitor for a specific resource.
      tags:
        - monitors
      operationId: listMonitoringTasks
      produces:
        - application/json
      parameters:
        - name: target
          in: query
          required: false
          x-is-map: false
          type: string
          description: The target system to search for.
        - name: active
          in: query
          required: false
          x-is-map: false
          default: 'true'
          type: string
          description: Filter by monitors that are active or inactive.
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
        - name: limit
          in: query
          required: false
          x-is-map: false
          default: 100
          type: integer
          format: int64
          description: The maximum number of results returned from this query
        - name: offset
          in: query
          required: false
          x-is-map: false
          default: 0
          type: integer
          format: int64
          description: The number of results skipped in the result set returned from this query
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/MonitoringTaskSummary'
        '400':
          description: Raised if a user does not supply a UUID or supplies an invalid JSON query
        '401':
          description: Raised if the user is not authorized.
        '403':
          description: Failed to authenticate the user
        '404':
          description: The specified Monitor cannot be found
        default:
          description: The service was unable to process the request.
    post:
      description: Add a new monitoring task
      tags:
        - monitors
      operationId: addMonitoringTasks
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          x-is-map: false
          description: The description of the monitoring task to run
          schema:
            $ref: '#/definitions/MonitoringTaskSummary'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/MonitoringTaskDetails'
        '400':
          description: Raised if a user supplies an invalid form
        '401':
          description: Raised if the user is not authorized.
        '403':
          description: Failed to authenticate the user
        default:
          description: The service was unable to save the monitor.
  '/monitors/v2/{monitorId}':
    get:
      description: Retrieve a specific monitor.
      tags:
        - monitors
      operationId: getMonitoringTask
      produces:
        - application/json
      parameters:
        - name: monitorId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the monitor
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/MonitoringTaskDetails'
        '400':
          description: Raised if a user does not supply a UUID
        '401':
          description: Raised if the user is not authorized.
        '403':
          description: Failed to authenticate the user
        '404':
          description: The specified Monitor cannot be found
        default:
          description: The service was unable to process the request.
    post:
      description: Updates an existing monitor.
      tags:
        - monitors
      operationId: updateMonitoringTask
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          x-is-map: false
          description: The description of the app to add or update. This can be either a file upload or json posted to the request body.
          schema:
            $ref: '#/definitions/MonitoringTaskSummary'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
        - name: monitorId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the monitor to update
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/MonitoringTaskDetails'
        '400':
          description: Raised if a user supplies an invalid form
        '401':
          description: Raised if the user is not authorized.
        '403':
          description: Failed to authenticate the user
        default:
          description: The service was unable to process the request.
    delete:
      description: Deletes a monitor.
      tags:
        - monitors
      operationId: deleteMonitoringTask
      produces:
        - application/json
      parameters:
        - name: monitorId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the monitor to delete
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
        '400':
          description: Raised if a user supplies no UUID
        '401':
          description: Raised if the user is not authorized.
        '403':
          description: Failed to authenticate the user
        default:
          description: The service was unable to process the request.
  '/monitors/v2/{monitorId}/checks':
    get:
      description: Retrieve checks for a specific monitor
      tags:
        - monitors
      operationId: listMonitoringTaskChecks
      produces:
        - application/json
      parameters:
        - name: monitorId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the monitor
        - name: startDate
          in: query
          required: false
          x-is-map: false
          type: string
          description: A timestamp indicating the earliest time of the first monitor check in ISO 8601 format
        - name: endDate
          in: query
          required: false
          x-is-map: false
          type: string
          description: A timestamp indicating the latest time of the first monitor check in ISO 8601 format
        - name: result
          in: query
          required: false
          x-is-map: false
          enum:
            - FAILED
            - PASSED
            - UNKNOWN
          type: string
          description: A timestamp indicating the latest time of the first monitor check in ISO 8601 format
        - name: limit
          in: query
          required: false
          x-is-map: false
          default: 250
          type: integer
          format: int64
          description: The max number of results.
        - name: offset
          in: query
          required: false
          x-is-map: false
          default: 0
          type: integer
          format: int64
          description: 'The number of records to when returning the results. When paginating results, the page number = ceil(offset/limit)'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/MonitoringTaskCheck'
        '400':
          description: Raised if a user does not supply a UUID or supplies an invalid JSON query
        '401':
          description: Raised if the user is not authorized.
        '403':
          description: Failed to authenticate the user
        '404':
          description: The specified Monitor cannot be found
        default:
          description: The service was unable to process the request.
    post:
      description: Forces a monitor check to run.
      tags:
        - monitors
      operationId: forceMonitoringTaskCheck
      produces:
        - application/json
      parameters:
        - name: monitorId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the monitor
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/MonitoringTaskDetails'
        '400':
          description: Raised if a user supplies an invalid form
        '401':
          description: Raised if the user is not authorized.
        '403':
          description: Failed to authenticate the user
        default:
          description: The service was unable to process the request.
  '/monitors/v2/{monitorId}/checks/{checkId}':
    get:
      description: Retrieve a specific monitor check
      tags:
        - monitors
      operationId: getMonitoringTaskCheck
      produces:
        - application/json
      parameters:
        - name: monitorId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the monitor
        - name: checkId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the monitor check
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/MonitoringTaskCheck'
        '400':
          description: Raised if a user does not supply a UUID
        '401':
          description: Raised if the user is not authorized.
        '403':
          description: Failed to authenticate the user
        '404':
          description: The specified Monitor cannot be found
        default:
          description: The service was unable to process the request.
  /notifications/v2/:
    get:
      description: Retrieve notification for a specific resource.
      tags:
        - notifications
      operationId: listNotifications
      produces:
        - application/json
      parameters:
        - name: associatedUuid
          in: query
          required: true
          x-is-map: false
          type: string
          description: The uuid of the associated resource. All notifications for this resource visible to the user will be returned.
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
        - name: limit
          in: query
          required: false
          x-is-map: false
          default: 100
          type: integer
          format: int64
          description: The maximum number of results returned from this query
        - name: offset
          in: query
          required: false
          x-is-map: false
          default: 0
          type: integer
          format: int64
          description: The number of results skipped in the result set returned from this query
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/Notification'
        '400':
          description: Raised if a user does not supply a UUID or supplies an invalid JSON query
        '401':
          description: Raised if the user is not authorized.
        '403':
          description: Failed to authenticate the user
        '404':
          description: The specified notification cannot be found
        default:
          description: The service was unable to query the notification database
    post:
      description: Add new notification.
      tags:
        - notifications
      operationId: addNotification
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          x-is-map: false
          description: The notification to add.
          schema:
            $ref: '#/definitions/NotificationRequest'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Notification'
        '400':
          description: Raised if a user supplies an invalid form
        '401':
          description: Raised if the user is not authorized.
        '403':
          description: Failed to authenticate the user
        default:
          description: The service was unable to query the notification database
  '/notifications/v2/{uuid}':
    get:
      description: Retrieve notification.
      tags:
        - notifications
      operationId: getNotification
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          required: true
          x-is-map: false
          type: string
          description: The uuid of the notification item
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Notification'
        '400':
          description: Raised if a user does not supply a UUID
        '401':
          description: Raised if the user is not authorized.
        '403':
          description: Failed to authenticate the user
        '404':
          description: The specified notification cannot be found
        default:
          description: The service was unable to query the notification database
    post:
      description: Update existing notification.
      tags:
        - notifications
      operationId: updateNotification
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          required: true
          x-is-map: false
          type: string
          description: The uuid of the notification item
        - name: body
          in: body
          required: true
          x-is-map: false
          description: The notification to update.
          schema:
            $ref: '#/definitions/NotificationRequest'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Notification'
        '400':
          description: Raised if a user supplies an invalid form
        '401':
          description: Raised if the user is not authorized.
        '403':
          description: Failed to authenticate the user
        default:
          description: The service was unable to query the notification database
    delete:
      description: Remove notification from the system.
      tags:
        - notifications
      operationId: deleteNotification
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          required: true
          x-is-map: false
          type: string
          description: The uuid of the notification item
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
        '400':
          description: Raised if a user supplies no UUID
        '401':
          description: Raised if the user is not authorized.
        '403':
          description: Failed to authenticate the user
        default:
          description: The service was unable to query the notification database
  /postits/v2/:
    get:
      description: List existing PostIts
      tags:
        - postits
      operationId: listPostits
      produces:
        - application/json
      parameters:
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
        - name: limit
          in: query
          required: false
          x-is-map: false
          default: 100
          type: integer
          format: int64
          description: The maximum number of results returned from this query
        - name: offset
          in: query
          required: false
          x-is-map: false
          default: 0
          type: integer
          format: int64
          description: The number of results skipped in the result set returned from this query
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/PostIt'
    post:
      description: Create a new PostIt
      tags:
        - postits
      operationId: addPostit
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          x-is-map: false
          description: The PostIt to create.
          schema:
            $ref: '#/definitions/PostItRequest'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/PostIt'
        '400':
          description: Raised if a user supplies an invalid username format
        '403':
          description: Failed to authenticate the user
        '404':
          description: The user profile cannot be found
        default:
          description: The service was unable to query the profile database
  '/postits/v2/{nonce}':
    delete:
      description: Immediately invalidates this PostIt URL.
      tags:
        - postits
      operationId: deletePostit
      produces:
        - application/json
      parameters:
        - name: nonce
          in: path
          required: true
          x-is-map: false
          type: string
          description: The nonce of this PostIt URL
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
  '/profiles/v2':
    get:
      description: List user profiles
      tags:
        - profiles
      operationId: listProfiles
      produces:
        - application/json
      parameters:
        - name: username
          in: query
          required: false
          x-is-map: false
          type: string
          description: The username to search for
        - name: name
          in: query
          required: false
          x-is-map: false
          type: string
          description: The user full name
        - name: email
          in: query
          required: false
          x-is-map: false
          type: string
          description: The user email address
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/Profile'
        '400':
          description: Raised if a user supplies an invalid username format
        '403':
          description: Failed to authenticate the user
        '404':
          description: The user profile cannot be found
        default:
          description: The service was unable to query the profile database
    post:
      description: Add a new user profile
      tags:
        - profiles
      operationId: addProfile
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          x-is-map: false
          description: The user profile to add
          schema:
            $ref: '#/definitions/Profile'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Profile'
  '/profiles/v2/{apiUsername}':
    get:
      description: Get a user profile by name
      tags:
        - profiles
      operationId: getProfile
      produces:
        - application/json
      parameters:
        - name: apiUsername
          in: path
          required: true
          x-is-map: false
          type: string
          description: The username of the profile to update
        - name: filter
          in: query
          required: false
          x-is-map: false
          default: '*'
          type: string
          description: A comma-separated list of fields in the response objects to return. This allows developers to create their own response objects
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Profile'
        '404':
          description: 'Not found'
    post:
      description: Update an existing user profile
      tags:
        - profiles
      operationId: updateProfile
      produces:
        - application/json
      parameters:
        - name: apiUsername
          in: path
          required: true
          x-is-map: false
          type: string
          description: The username of the profile to update
        - name: body
          in: body
          required: true
          x-is-map: false
          description: The updated profile
          schema:
            $ref: '#/definitions/ProfileRequest'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Profile'
    delete:
      description: Delte a user profile by name
      tags:
        - profiles
      operationId: deleteProfile
      produces:
        - application/json
      parameters:
        - name: apiUsername
          in: path
          required: true
          x-is-map: false
          type: string
          description: The username of the profile to update
        - name: filter
          in: query
          required: false
          x-is-map: false
          default: '*'
          type: string
          description: A comma-separated list of fields in the response objects to return. This allows developers to create their own response objects
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: 'Empty response'
          schema:
            $ref: '#/definitions/EmptyClientResponse'
        '403':
          description: 'User does not have permission to manage users'
        '404':
          description: 'Not found'
  '/profiles/v2/{apiUsername}/users':
    get:
      description: List all internal users created by the authenticated user
      tags:
        - profiles
      operationId: listInternalUsers
      produces:
        - application/json
      parameters:
        - name: apiUsername
          in: path
          required: true
          x-is-map: false
          type: string
          description: The username of a valid api user
        - name: username
          in: query
          required: false
          x-is-map: false
          type: string
          description: The username of the internal user
        - name: name
          in: query
          required: false
          x-is-map: false
          type: string
          description: The full name of the internal user
        - name: email
          in: query
          required: false
          x-is-map: false
          type: string
          description: The email address of the internal user
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/InternalUser'
    post:
      description: Create or update an internal user.
      tags:
        - profiles
      operationId: addInternalUser
      produces:
        - application/json
      parameters:
        - name: apiUsername
          in: path
          required: true
          x-is-map: false
          type: string
          description: The username of a valid api user
        - name: body
          in: body
          required: true
          x-is-map: false
          description: The internal user to create.
          schema:
            $ref: '#/definitions/ProfileRequest'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/InternalUser'
    delete:
      description: Delete all internal users created by the authenticated user.
      tags:
        - profiles
      operationId: clearInternalUsers
      produces:
        - application/json
      parameters:
        - name: apiUsername
          in: path
          required: true
          x-is-map: false
          type: string
          description: The username of a valid api user
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
  '/profiles/v2/{apiUsername}/users/{internalUsername}':
    get:
      description: Find api user profile by their api username
      tags:
        - profiles
      operationId: getInternalUser
      produces:
        - application/json
      parameters:
        - name: apiUsername
          in: path
          required: true
          x-is-map: false
          type: string
          description: The username of a valid api user
        - name: internalUsername
          in: path
          required: true
          x-is-map: false
          type: string
          description: The username of a valid internal user
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/InternalUser'
    post:
      description: Create or update the given internal user.
      tags:
        - profiles
      operationId: updateInternalUser
      produces:
        - application/json
      parameters:
        - name: apiUsername
          in: path
          required: true
          x-is-map: false
          type: string
          description: The username of a valid api user
        - name: internalUsername
          in: path
          required: true
          x-is-map: false
          type: string
          description: The username of a valid internal user
        - name: body
          in: body
          required: true
          x-is-map: false
          description: A JSON description of the internal user to update
          schema:
            $ref: '#/definitions/ProfileRequest'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/InternalUser'
    delete:
      description: Delete all internal users created by the authenticated user.
      tags:
        - profiles
      operationId: deleteInternalUser
      produces:
        - application/json
      parameters:
        - name: apiUsername
          in: path
          required: true
          x-is-map: false
          type: string
          description: The username of a valid api user
        - name: internalUsername
          in: path
          required: true
          x-is-map: false
          type: string
          description: The username of a valid internal user
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/InternalUser'
  '/systems/v2/':
    get:
      description: Show all systems available to the user.
      tags:
        - systems
      operationId: listSystems
      produces:
        - application/json
      parameters:
        - name: type
          in: query
          required: false
          x-is-map: false
          enum:
            - STORAGE
            - EXECUTION
          type: string
          description: The type of system to return
        - name: default
          in: query
          required: false
          x-is-map: false
          type: boolean
          description: 'If true, only default systems be returned'
        - name: public
          in: query
          required: false
          x-is-map: false
          type: boolean
          description: 'If true, only public systems will be returned. If false, no public systems will be returned. If null, both public and private systems will be returned.'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
        - name: limit
          in: query
          required: false
          x-is-map: false
          default: 100
          type: integer
          format: int64
          description: The maximum number of results returned from this query
        - name: offset
          in: query
          required: true
          x-is-map: false
          default: 0
          type: integer
          format: int64
          description: The number of results skipped in the result set returned from this query
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/SystemSummary'
    post:
      description: Add a new execution system
      tags:
        - systems
      operationId: addExecutionSystem
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          x-is-map: false
          description: The description of the system to add or update.
          schema:
            $ref: '#/definitions/SystemRequest'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ExecutionSystem'
  '/systems/v2/{systemId}':
    get:
      description: Find information about an individual system.
      tags:
        - systems
      operationId: getSystemDetails
      produces:
        - application/json
      parameters:
        - name: systemId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The unique id of the system
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/System'
    put:
      description: Perform a management action on the system.
      tags:
        - systems
      operationId: invokeSystemAction
      produces:
        - application/json
      parameters:
        - name: systemId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the system receiving the action
        - name: body
          in: body
          required: true
          x-is-map: false
          description: The action to invoke
          schema:
            $ref: '#/definitions/SystemAction'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
    post:
      description: Update a system description
      tags:
        - systems
      operationId: updateSystem
      produces:
        - application/json
      parameters:
        - name: systemId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The unique id of the system
        - name: body
          in: body
          required: true
          x-is-map: false
          description: The description of the system to update.
          schema:
            $ref: '#/definitions/SystemRequest'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/System'
    delete:
      description: Delete a system.
      tags:
        - systems
      operationId: deleteSystem
      produces:
        - application/json
      parameters:
        - name: systemId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The unique id of the system
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
  '/systems/v2/{systemId}/roles':
    get:
      description: Get a list of all users and their roles on this system.
      tags:
        - systems
      operationId: listSystemRoles
      produces:
        - application/json
      parameters:
        - name: systemId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the system.
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
        - name: limit
          in: query
          required: false
          x-is-map: false
          default: 100
          type: integer
          format: int64
          description: The maximum number of results returned from this query
        - name: offset
          in: query
          required: false
          x-is-map: false
          default: 0
          type: integer
          format: int64
          description: The number of results skipped in the result set returned from this query
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/MultipleSystemRoleResponse'
    delete:
      description: Deletes all roles on a system.
      tags:
        - systems
      operationId: clearSystemRoles
      produces:
        - application/json
      parameters:
        - name: systemId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the system.
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
  '/systems/v2/{systemId}/roles/{username}':
    get:
      description: Get a specific user role on this system.
      tags:
        - systems
      operationId: getSystemRole
      produces:
        - application/json
      parameters:
        - name: systemId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the system.
        - name: username
          in: path
          required: true
          x-is-map: false
          type: string
          description: The username of the user about whose role you are inquiring.
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/SystemRole'
    post:
      description: Update a user role on a system.
      tags:
        - systems
      operationId: updateSystemRole
      produces:
        - application/json
      parameters:
        - name: systemId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the system.
        - name: username
          in: path
          required: true
          x-is-map: false
          type: string
          description: The username of the api user associated with the role
        - name: body
          in: body
          required: true
          x-is-map: false
          description: The role to update.
          schema:
            $ref: '#/definitions/SystemRoleRequest'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/SystemRole'
    delete:
      description: Deletes all roles for a user on a system.
      tags:
        - systems
      operationId: deleteSystemRole
      produces:
        - application/json
      parameters:
        - name: systemId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the system.
        - name: username
          in: path
          required: true
          x-is-map: false
          type: string
          description: The username of the api user associated with the role
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
  '/systems/v2/{systemId}/credentials':
    get:
      description: Get a list of all internal user credentials on this system.
      tags:
        - systems
      operationId: listSystemCredentials
      produces:
        - application/json
      parameters:
        - name: systemId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the system.
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
        - name: limit
          in: query
          required: false
          x-is-map: false
          default: 100
          type: integer
          format: int64
          description: The maximum number of results returned from this query
        - name: offset
          in: query
          required: false
          x-is-map: false
          default: 0
          type: integer
          format: int64
          description: The number of results skipped in the result set returned from this query
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/SystemCredential'
    post:
      description: 'Add an internal user''s credential on a system. This applies both to storage and, if applicable, login credentials.'
      tags:
        - systems
      operationId: addSystemCredential
      produces:
        - application/json
      parameters:
        - name: systemId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the system.
        - name: body
          in: body
          required: true
          x-is-map: false
          description: The description of the internal user credential to add or update.
          schema:
            $ref: '#/definitions/SystemCredential'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/SystemCredential'
    delete:
      description: Deletes all credentials registered to a system.
      tags:
        - systems
      operationId: clearSystemAuthCredentials
      produces:
        - application/json
      parameters:
        - name: systemId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the system.
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
  '/systems/v2/{systemId}/credentials/{internalUsername}':
    get:
      description: Get a list of all internal users and their credentials on this system.
      tags:
        - systems
      operationId: listCredentialsForInternalUser
      produces:
        - application/json
      parameters:
        - name: systemId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the system.
        - name: internalUsername
          in: path
          required: true
          x-is-map: false
          type: string
          description: The username of a internal user on this system.
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/SystemCredentialsResponse'
    post:
      description: Update an internal user credential on a system.
      tags:
        - systems
      operationId: updateSystemCredential
      produces:
        - application/json
      parameters:
        - name: systemId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the system.
        - name: internalUsername
          in: path
          required: true
          x-is-map: false
          type: string
          description: The username of a internal user on this system.
        - name: body
          in: body
          required: true
          x-is-map: false
          description: The description of the internal user credential to add or update.
          schema:
            $ref: '#/definitions/SystemAuthConfig'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/SystemCredential'
    delete:
      description: Deletes all internal user credentials registered to a system.
      tags:
        - systems
      operationId: clearSystemAuthCredentialsForInternalUser
      produces:
        - application/json
      parameters:
        - name: systemId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the system.
        - name: internalUsername
          in: path
          required: true
          x-is-map: false
          type: string
          description: The username of a internal user on this system.
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
  '/systems/v2/{systemId}/credentials/{internalUsername}/{credentialType}':
    get:
      description: Get the internal user credential of the given type on the system.
      tags:
        - systems
      operationId: getSystemCredential
      produces:
        - application/json
      parameters:
        - name: systemId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the system.
        - name: internalUsername
          in: path
          required: true
          x-is-map: false
          type: string
          description: The username of a internal user on this system.
        - name: credentialType
          in: path
          required: true
          x-is-map: false
          enum:
            - LOGIN
            - STORAGE
          type: string
          description: The configuration type to which to apply this credential.
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/SystemCredential'
    post:
      description: Add or update a credential of the given type on a system.
      tags:
        - systems
      operationId: updateSystemCredentialOfType
      produces:
        - application/json
      parameters:
        - name: systemId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the system.
        - name: internalUsername
          in: path
          required: true
          x-is-map: false
          type: string
          description: The username of a internal user on this system.
        - name: credentialType
          in: path
          required: true
          x-is-map: false
          enum:
            - LOGIN
            - STORAGE
          type: string
          description: The configuration type to which to apply this credential.
        - name: body
          in: body
          required: true
          x-is-map: false
          description: The description of the internal user credential to add or update.
          schema:
            $ref: '#/definitions/SystemAuthConfig'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/SystemCredential'
    delete:
      description: Deletes the internal user credentials for the given credential type on a system.
      tags:
        - systems
      operationId: deleteSystemAuthCredentialForInternalUser
      produces:
        - application/json
      parameters:
        - name: systemId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the system.
        - name: internalUsername
          in: path
          required: true
          x-is-map: false
          type: string
          description: The username of a internal user on this system.
        - name: credentialType
          in: path
          required: true
          x-is-map: false
          enum:
            - LOGIN
            - STORAGE
          type: string
          description: The configuration type to which to apply this credential.
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
  '/transforms/v2/{transformId}':
    get:
      description: Find the transform of the given uuid
      tags:
        - transforms
      operationId: getTransform
      produces:
        - application/json
      parameters:
        - name: transformId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The name of the transform requested.
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Transform'
  '/transforms/v2/{transformId}/async/{owner}/{filePath}':
    post:
      description: Transform a file and stage it to a specified location.
      tags:
        - transforms
      operationId: asyncTransform
      produces:
        - application/json
      parameters:
        - name: transformId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The name of the transform to apply to the given file.
        - name: owner
          in: path
          required: true
          x-is-map: false
          type: string
          description: The name of the api user owning the file at the given path.
        - name: filePath
          in: path
          required: true
          x-is-map: false
          type: string
          description: The path to the file to be transformed and staged
        - name: body
          in: body
          required: true
          x-is-map: false
          description: The transfer request details.
          schema:
            $ref: '#/definitions/TransformRequest'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Transform'
  '/transforms/v2/{transformId}/sync/{owner}/{filePath}':
    post:
      description: Transform a file and download it directly.
      tags:
        - transforms
      operationId: syncTransform
      produces:
        - application/json
      parameters:
        - name: transformId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The name of the transform to apply to the given file.
        - name: owner
          in: path
          required: true
          x-is-map: false
          type: string
          description: The name of the api user owning the file at the given path.
        - name: filePath
          in: path
          required: true
          x-is-map: false
          type: string
          description: The path to the file to be transformed and downloaded.
        - name: body
          in: body
          required: true
          x-is-map: false
          description: The transfer request details.
          schema:
            $ref: '#/definitions/TransformRequest'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
  '/jobs/v2/{jobId}/outputs/media/{filePath}':
    get:
      description: Download an output file from a specific job.
      tags:
        - jobs
      operationId: downloadJobOutput
      produces:
        - application/json
      parameters:
        - name: jobId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the job.
        - name: filePath
          in: path
          required: true
          x-is-map: false
          type: string
          description: 'The path to an output file relative to the job output directory. '
        - name: force
          in: query
          required: true
          x-is-map: false
          default: false
          type: boolean
          description: 'If true, the Content-Disposition header is set to force a file download from the browser.'
      responses:
        '200':
          description: ''
  '/jobs/v2/{jobId}/history':
    get:
      description: Get the history of this job.
      tags:
        - jobs
      operationId: getJobHistory
      produces:
        - application/json
      parameters:
        - name: jobId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the job.
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
        - name: limit
          in: query
          required: false
          x-is-map: false
          default: 100
          type: integer
          format: int64
          description: The maximum number of results returned from this query
        - name: offset
          in: query
          required: false
          x-is-map: false
          default: 0
          type: integer
          format: int64
          description: The number of results skipped in the result set returned from this query
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/JobHistory'
  '/apps/v2/{appId}/history':
    get:
      description: List the event history of this app
      tags:
        - apps
      operationId: listAppHistory
      produces:
        - application/json
      parameters:
        - name: status
          in: query
          required: false
          x-is-map: false
          type: string
          description: The event status
        - name: created
          in: query
          required: false
          x-is-map: false
          type: string
          description: The date the event occurred
        - name: limit
          in: query
          required: false
          x-is-map: false
          default: 100
          type: integer
          format: int64
          description: The maximum number of results returned from this query
        - name: offset
          in: query
          required: false
          x-is-map: false
          default: 0
          type: integer
          format: int64
          description: The number of results skipped in the result set returned from this query
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
        - name: appId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the app for which the history will be returned
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/HistoryEvent'
  '/files/v2/history/system/{systemId}/{filePath}':
    get:
      description: Download a file from the default storage location of the user.
      tags:
        - files
      operationId: listFileItemHistory
      produces:
        - application/json
      parameters:
        - name: filePath
          in: path
          required: true
          x-is-map: false
          type: string
          description: The path of the file relative to the given system root location.
        - name: systemId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The system on which the file item resides
        - name: status
          in: query
          required: false
          x-is-map: false
          type: string
          description: The status of the event
        - name: created
          in: query
          required: false
          x-is-map: false
          type: string
          description: The date the event occurred
        - name: filter
          in: query
          required: false
          x-is-map: false
          default: '*'
          type: string
          description: A comma-separated list of fields in the response objects to return. This allows developers to create their own response objects
        - name: naked
          in: query
          required: false
          x-is-map: false
          default: true
          type: string
          description: If true, the response wrapper is stripped and the raw object is returned
        - name: limit
          in: query
          required: false
          x-is-map: false
          default: 100
          type: integer
          format: int64
          description: The maximum number of results returned from this query
        - name: offset
          in: query
          required: false
          x-is-map: false
          default: 0
          type: integer
          format: int64
          description: The number of results skipped in the result set returned from this query
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/HistoryEvent'
  '/files/v2/history/{filePath}':
    get:
      description: List event history of a file item on the default storage system of the user
      tags:
        - files
      operationId: listFileItemHistoryOnDefaultSystem
      produces:
        - application/json
      parameters:
        - name: filePath
          in: path
          required: true
          x-is-map: false
          type: string
          description: The path of the file relative to the default storage location of the user.
        - name: status
          in: query
          required: false
          x-is-map: false
          type: string
          description: The event status
        - name: created
          in: query
          required: false
          x-is-map: false
          type: string
          description: The date the event occurred
        - name: filter
          in: query
          required: false
          x-is-map: false
          default: '*'
          type: string
          description: A comma-separated list of fields in the response objects to return. This allows developers to create their own response objects
        - name: naked
          in: query
          required: false
          x-is-map: false
          default: true
          type: string
          description: If true, the response wrapper is stripped and the raw object is returned
        - name: limit
          in: query
          required: false
          x-is-map: false
          default: 100
          type: integer
          format: int64
          description: The maximum number of results returned from this query
        - name: offset
          in: query
          required: false
          x-is-map: false
          default: 0
          type: integer
          format: int64
          description: The number of results skipped in the result set returned from this query
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/HistoryEvent'
  '/files/v2/listings/{filepath}':
    get:
      description: Get a remote directory listing on the default storage system of the user
      tags:
        - files
      operationId: listFileItemsOnDefaultSystem
      produces:
        - application/json
      parameters:
        - name: filepath
          in: path
          required: true
          x-is-map: false
          type: string
          description: The path of the file relative to the default storage location of the user
        - name: filter
          in: query
          required: false
          x-is-map: false
          default: '*'
          type: string
          description: A comma-separated list of fields in the response objects to return. This allows developers to create their own response objects
        - name: naked
          in: query
          required: false
          x-is-map: false
          default: true
          type: string
          description: If true, the response wrapper is stripped and the raw object is returned
        - name: limit
          in: query
          required: false
          x-is-map: false
          default: 100
          type: integer
          format: int64
          description: The maximum number of results returned from this query
        - name: offset
          in: query
          required: false
          x-is-map: false
          default: 0
          type: integer
          format: int64
          description: The number of results skipped in the result set returned from this query
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/FileInfo'
  /systems/v2:
    post:
      description: Add  a storage system
      tags:
        - systems
      operationId: addStorageSystem
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          x-is-map: false
          description: Description of a storage system
          schema:
            $ref: '#/definitions/SystemRequest'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/StorageSystem'
  '/systems/{systemId}/roles':
    post:
      description: Adds a role on the system for the given user
      tags:
        - systems
      operationId: addSystemRole
      produces:
        - application/json
      parameters:
        - name: systemId
          in: path
          required: true
          x-is-map: false
          type: string
          description: The id of the system on which to grant the role
        - name: body
          in: body
          required: true
          x-is-map: false
          description: The new role to grant
          schema:
            $ref: '#/definitions/SystemRoleRequest'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/SystemRole'
  /transforms/v2/:
    get:
      description: List and search for transforms
      tags:
        - transforms
      operationId: listTransforms
      produces:
        - application/json
      parameters:
        - name: name
          in: query
          required: false
          x-is-map: false
          type: string
          description: The name of the transform
        - name: version
          in: query
          required: false
          x-is-map: false
          type: string
          description: The name of the transform
        - name: limit
          in: query
          required: false
          x-is-map: false
          default: 100
          type: integer
          format: int64
          description: The maximum number of results returned from this query
        - name: offset
          in: query
          required: false
          x-is-map: false
          default: 0
          type: integer
          format: int64
          description: The number of results skipped in the result set returned from this query
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
        - name: tags
          in: query
          required: false
          x-is-map: false
          type: string
          description: One or more tags of the transform
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/Transform'
  /uuids/v2/:
    get:
      description: Resolve one or more UUID to their resource URL and type
      tags:
        - uuids
      operationId: resolveUuids
      produces:
        - application/json
      parameters:
        - name: uuids
          in: query
          required: false
          x-is-map: false
          type: string
          description: A comma-separated list of UUID to resolve
        - name: limit
          in: query
          required: false
          x-is-map: false
          default: 100
          type: integer
          format: int64
          description: The maximum number of results returned from this query
        - name: offset
          in: query
          required: false
          x-is-map: false
          default: 0
          type: integer
          format: int64
          description: The number of results skipped in the result set returned from this query
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
        - name: expand
          in: query
          required: false
          x-is-map: false
          default: false
          type: boolean
          description: 'If true, the summary object will be expanded to the full resource representation.'
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/UUIDSummary'
    post:
      description: Generate a new UUID for a given resource type
      tags:
        - uuids
      operationId: createUuid
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          x-is-map: false
          description: The type of resource for which the UUID should be generated.
          schema:
            $ref: '#/definitions/UUIDRequest'
        - name: naked
          in: query
          required: true
          x-is-map: false
          default: true
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/UUIDResolution'
  '/uuids/v2/{uuid}':
    get:
      description: Resolve one or more UUID to their resource URL and type
      tags:
        - uuids
      operationId: resolveUuid
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          required: true
          x-is-map: false
          type: string
          description: A valid Agave UUID to resolve
        - name: naked
          in: query
          required: false
          x-is-map: false
          default: true
          type: boolean
        - name: expand
          in: query
          required: false
          x-is-map: false
          default: false
          type: boolean
          description: 'If true, the summary object will be expanded to the full resource representation.'
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/UUIDResolution'
  /tags/v2:
    get:
      operationId: listTags
      summary: Available tags
      description: The Tags endpoint returns summary information about the available list of tags right now.
      tags:
        - Tag
      parameters:
        - name: name
          in: query
          description: Name of the tag for which to search
          required: false
          type: string
        - name: resourceType
          in: query
          description: Search for tags associated with one or resources of named type
          required: false
          type: string
        - name: resourceId
          in: query
          description: Id of tagged resource
          required: false
          type: string
        - name: lastModified
          in: query
          description: Date at which tag was modified in ISO8601 format
          required: false
          type: string
        - name: created
          in: query
          description: Date at which tag was created in ISO8601 format
          required: false
          type: string
        - name: naked
          in: query
          description: If true return only the payload, not the standard response wrapper
          required: false
          type: boolean
          default: true
        - name: limit
          in: query
          description: Maximum number of responses. Default 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Number of results to skip by default
          required: false
          type: integer
          default: 0
      responses:
        '200':
          description: An array of tags
          schema:
            type: array
            items:
              $ref: '#/definitions/TagSummary'
        '400':
          description: 'Bad request, usually due to invalid resource type in the response query.'
        default:
          description: Unexpected error
    post:
      operationId: addTag
      summary: Creat a new tag
      description: Creates a new tag
      tags:
        - Tag
      consumes:
        - application/json
        - multipart/form-data
      parameters:
        - in: body
          name: body
          description: JSON Tag object
          required: true
          schema:
            $ref: '#/definitions/Tag'
        - name: naked
          in: query
          description: If true return only the payload, not the standard response wrapper
          required: false
          type: boolean
          default: true
      responses:
        '200':
          description: An array of tags
          schema:
            $ref: '#/definitions/Tag'
        '400':
          description: 'Bad request, usually due to invalid resource type in the response query.'
        '403':
          description: You do not have sufficient permissions to the tagged resources to apply the tag.
        default:
          description: Unexpected error
  '/tags/v2/{tagId}':
    get:
      operationId: getTagDetails
      summary: Tag Details
      description: Returns detailed information about the named tag
      tags:
        - Tag
      parameters:
        - name: tagId
          in: path
          description: Unique id of the tag
          required: true
          type: string
        - name: naked
          in: query
          description: If true return only the payload, not the standard response wrapper
          required: false
          type: boolean
          default: true
      responses:
        '200':
          description: Tag details
          schema:
            "$ref": "#/definitions/Tag"
        '403':
          description: You do not have sufficient permissions to view this tag.
        '404':
          description: Not found
        default:
          description: Unexpected error
    put:
      operationId: updateTag
      summary: Update tag
      description: Updates the given tag with the updated information
      tags:
        - Tag
      consumes:
        - application/json
        - multipart/form-data
      parameters:
        - name: tagId
          in: path
          description: Unique id of the tag
          required: true
          type: string
        - name: body
          in: body
          description: JSON Tag object
          required: true
          schema:
            $ref: '#/definitions/Tag'
        - name: naked
          in: query
          description: If true return only the payload, not the standard response wrapper
          required: false
          type: boolean
          default: true
      responses:
        '200':
          description: Tag details
          schema:
            "$ref": "#/definitions/Tag"
        '403':
          description: You do not have sufficient permissions to view this tag.
        '404':
          description: Not found
        default:
          description: Unexpected error
    delete:
      operationId: deleteTag
      summary: Delete tag
      description: Deletes the tag and all permissions
      tags:
        - Tag
      parameters:
        - name: tagId
          in: path
          description: Unique id of the tag
          required: true
          type: string
        - name: naked
          in: query
          description: If true return only the payload, not the standard response wrapper
          required: false
          type: boolean
          default: true
      responses:
        '204':
          description: "No Content"
        '403':
          description: You do not have sufficient permissions to view this tag.
        '404':
          description: Not found
        default:
          description: Unexpected error
  '/tags/v2/{tagId}/history':
    get:
      operationId: listTagHistory
      summary: Tag history
      description: Returns a list of items with the given tag.
      tags:
        - Tag
      parameters:
        - in: path
          name: tagId
          description: Unique id of the tag
          required: true
          type: string
        - name: naked
          in: query
          description: If true return only the payload, not the standard response wrapper
          required: false
          type: boolean
          default: true
        - name: limit
          in: query
          description: Maximum number of responses. Default 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Number of results to skip by default
          required: false
          type: integer
          default: 0
      responses:
        '200':
          description: Tag events
          schema:
            type: array
            items:
              $ref: '#/definitions/TagHistory'
        '403':
          description: You do not have sufficient permissions to either the tag or resource.
        '404':
          description: Not found
        default:
          description: Unexpected error
  '/tags/v2/{tagId}/resources':
    get:
      operationId: listTagResources
      summary: Tagged items
      description: Returns a list of items with the given tag.
      tags:
        - Tag
      parameters:
        - in: path
          name: tagId
          description: Unique id of the tag
          required: true
          type: string
        - name: naked
          in: query
          description: If true return only the payload, not the standard response wrapper
          required: false
          type: boolean
          default: true
        - name: limit
          in: query
          description: Maximum number of responses. Default 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Number of results to skip by default
          required: false
          type: integer
          default: 0
      responses:
        '200':
          description: Tag details
          schema:
            type: array
            items:
              $ref: '#/definitions/TagResource'
        '403':
          description: You do not have sufficient permissions to either the tag or resource.
        '404':
          description: Not found
        default:
          description: Unexpected error
    post:
      operationId: addTagResource
      summary: Add resources to tag
      description: Adds the list of resources to the given tag
      tags:
        - Tag
      consumes:
        - application/json
      parameters:
        - in: path
          name: tagId
          description: Unique id of the tag
          required: true
          type: string
        - in: body
          name: body
          description: List of resource uuid to add
          required: true
          schema:
            $ref: '#/definitions/TagResource'
        - name: naked
          in: query
          description: If true return only the payload, not the standard response wrapper
          required: false
          type: boolean
          default: true
      responses:
        '200':
          description: Tag resources
          schema:
            type: array
            items:
              $ref: '#/definitions/Tag'
        '403':
          description: You do not have sufficient permissions to either the tag or resource.
        '404':
          description: Not found
        default:
          description: Unexpected error
    delete:
      operationId: clearTagResources
      summary: Clear all tagged resources
      description: Removes all resources from the given tag
      tags:
        - Tag
      parameters:
        - in: path
          name: tagId
          description: Unique id of the tag
          required: true
          type: string
        - name: naked
          in: query
          description: If true return only the payload, not the standard response wrapper
          required: false
          type: boolean
          default: true
      responses:
        '204':
          description: No content
        '403':
          description: You do not have sufficient permissions to either the tag or resource.
        '404':
          description: Not found
        default:
          description: Unexpected error
  '/tags/v2/{tagId}/resources/{uuid}':
    get:
      operationId: getTaggedResource
      summary: Get tagged item details
      description: Returns a list of items with the given tag.
      tags:
        - Tag
      parameters:
        - in: path
          name: tagId
          description: Unique id of the tag
          required: true
          type: string
        - in: path
          name: uuid
          description: Unique id of a resource
          required: true
          type: string
        - name: naked
          in: query
          description: If true return only the payload, not the standard response wrapper
          required: false
          type: boolean
          default: true
      responses:
        '200':
          description: Tag details
          schema:
            $ref: '#/definitions/TagResource'
        '403':
          description: You do not have sufficient permissions to either the tag or resource.
        '404':
          description: Not found
        default:
          description: Unexpected error
    put:
      operationId: updateTagResource
      summary: Add resource to tag
      description: Adds the resource with the given uuid to the given tag
      tags:
        - Tag
      consumes:
        - application/json
      parameters:
        - in: path
          name: tagId
          description: Unique id of the tag
          required: true
          type: string
        - in: path
          name: uuid
          description: Unique id of a resource
          required: true
          type: string
        - in: body
          name: body
          description: empty body
          required: false
          schema:
            $ref: '#/definitions/TagResource'
        - name: naked
          in: query
          description: If true return only the payload, not the standard response wrapper
          required: false
          type: boolean
          default: true
      responses:
        '200':
          description: Tag details
          schema:
            $ref: '#/definitions/TagResource'
        '403':
          description: You do not have sufficient permissions to either the tag or resource.
        '404':
          description: Not found
        default:
          description: Unexpected error
    delete:
      operationId: removeTagResource
      summary: Remove resource from tag
      description: Removes the given uuid from this tag
      tags:
        - Tag
      parameters:
        - in: path
          name: tagId
          description: Unique id of the tag
          required: true
          type: string
        - in: path
          name: uuid
          description: UUID of the resource to delete
          required: true
          type: string
        - name: naked
          in: query
          description: If true return only the payload, not the standard response wrapper
          required: false
          type: boolean
          default: true
      responses:
        '204':
          description: No content
        '403':
          description: You do not have sufficient permissions to either the tag or resource.
        '404':
          description: Not found
        default:
          description: Unexpected error
  '/tags/v2/{tagId}/pems':
    get:
      operationId: listTagPermissions
      summary: List permissionss set for a given tag id
      description: Returns a list of permission objects set on this Tag
      tags:
        - Tag
      parameters:
        - name: tagId
          in: path
          description: Unique id of the system
          required: true
          type: string
        - name: naked
          in: query
          description: If true return only the payload, not the standard response wrapper
          required: false
          type: boolean
          default: true
        - name: limit
          in: query
          description: Maximum number of responses. Default 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Number of results to skip by default
          required: false
          type: integer
          default: 0
      responses:
        '200':
          description: Current Status of the system
          schema:
            type: array
            items:
              $ref: '#/definitions/Permission'
        '403':
          description: You do not have sufficient permissions to either the tag or resource.
        '404':
          description: Not found
        default:
          description: Unexpected error
    post:
      operationId: updateTagPermission
      summary: Grant permission
      description: Adds a permission for a given user to a given tag
      tags:
        - Tag
      consumes:
        - application/json
        - multipart/form-data
      parameters:
        - name: tagId
          in: path
          description: Unique id of the tag
          required: true
          type: string
        - name: body
          in: body
          description: Unique id of a resource
          required: true
          schema:
            $ref: '#/definitions/Permission'
        - name: naked
          in: query
          description: If true return only the payload, not the standard response wrapper
          required: false
          type: boolean
          default: true
      responses:
        '200':
          description: Tag details
          schema:
            $ref: '#/definitions/Permission'
        '403':
          description: You do not have sufficient permissions to either the tag or resource.
        '404':
          description: Not found
        default:
          description: Unexpected error
    delete:
      operationId: clearTagPermissions
      summary: Clear tag permissions
      description: Removes all permissions save ownership from the given tag
      tags:
        - Tag
      parameters:
        - name: tagId
          in: path
          description: Unique id of the tag
          required: true
          type: string
        - name: naked
          in: query
          description: If true return only the payload, not the standard response wrapper
          required: false
          type: boolean
          default: true
      responses:
        '204':
          description: No content
        '404':
          description: Not found
        default:
          description: Unexpected error
  '/tags/v2/{tagId}/pems/{username}':
    get:
      operationId: getTagPermissionForUser
      summary: List tag permissions for a user
      description: Returns the permission set on the given tag for a specific user.
      tags:
        - Tag
      parameters:
        - name: tagId
          in: path
          description: Unique id of the tag
          required: true
          type: string
        - name: username
          in: path
          description: Valid username
          required: true
          type: string
        - name: naked
          in: query
          description: If true return only the payload, not the standard response wrapper
          required: false
          type: boolean
          default: true
      responses:
        '200':
          description: The user permission on this tag
          schema:
            type: array
            items:
              $ref: '#/definitions/Permission'
        '403':
          description: You do not have sufficient permissions to either the tag or resource
        '404':
          description: Not found
        default:
          description: Unexpected error
    post:
      operationId: updateTagPermissionForUser
      summary: Update user permission on tag
      description: Resets the user permission on the given tag
      tags:
        - Tag
      consumes:
        - application/json
        - multipart/form-data
      parameters:
        - in: path
          name: tagId
          description: Unique id of the tag
          required: true
          type: string
        - in: path
          name: username
          description: Valid username
          required: true
          type: string
        - in: body
          name: body
          description: Valid permission value
          required: true
          schema:
            $ref: '#/definitions/Permission'
        - name: naked
          in: query
          description: If true return only the payload, not the standard response wrapper
          required: false
          type: boolean
          default: true
      responses:
        '200':
          description: Tag details
          schema:
            $ref: '#/definitions/Permission'
        '403':
          description: You do not have sufficient permissions to either the tag or resource.
        '404':
          description: Not found
        default:
          description: Unexpected error
    delete:
      operationId: deleteTagPermissionForUser
      summary: Remove user tag permission
      description: Removes permissions for the given user on the given tag
      tags:
        - Tag
      parameters:
        - in: path
          name: tagId
          description: Unique id of the tag
          required: true
          type: string
        - name: username
          in: path
          description: Username to revoke permission
          required: true
          type: string
        - name: naked
          in: query
          description: If true return only the payload, not the standard response wrapper
          required: false
          type: boolean
          default: true
      responses:
        '204':
          description: No content
        '403':
          description: You do not have sufficient permissions to either the tag or resource.
        '404':
          description: Not found
        default:
          description: Unexpected error
  '/tenants/v2':
    get:
      operationId: listTenants
      summary: List all active tenants
      description: Lists all active tenants publicly available 
      tags:
        - Tenants
      parameters:
        - 
          $ref: '#/parameters/filter'
        - 
          $ref: '#/parameters/naked'
        - 
          $ref: '#/parameters/limit'
        - 
          $ref: '#/parameters/offset'
      responses:
        '200':
          description: An single UUID
          schema:
            type: array
            items:
              $ref: '#/definitions/Tenant'
        '400':
          description: 'Bad request, usually due to invalid resource type in the response query.'
        '403':
          description: You do not have sufficient permissions to the tagged resources.
        default:
          description: Unexpected error
          
  '/tenants/v2/{codeOrUuid}':
    get:
      operationId: getTenantDetails
      summary: Resolve Tenant details
      description: Returns information about the tenant with the given code or id
      tags:
        - Tenants
      parameters:
        - name: codeOrUuid
          in: path
          description: Unique tenant code or id of the tenant
          required: true
          type: string
        - 
          $ref: '#/parameters/filter'
        - 
          $ref: '#/parameters/naked'
      responses:
        '200':
          description: Tenant details
          schema:
            "$ref": "#/definitions/Tenant"
        '403':
          description: You do not have sufficient permissions to view the resource corresponding to this uuid.
        '404':
          description: Not found
        default:
          description: Unexpected error
          
definitions:
  ApplicationParameterStringValue:
    title: ApplicationParameterStringValue
    description: An ApplicationParameter representing a string value
    type: object
    properties:
      type:
        description: The primary type of this parameter
        type: string
        default: STRING
    required:
      - type
    allOf:
      - $ref: '#/definitions/ApplicationArgumentValue'
  ApplicationParameterBooleanValue:
    title: ApplicationParameterBooleanValue
    description: An ApplicationParameter representing a boolean value
    type: object
    properties:
      type:
        description: The primary type of this parameter
        type: string
        default: bool
    required:
      - type
    allOf:
      - $ref: '#/definitions/AbstractApplicationParameterValue'
  ApplicationParameterNumericValue:
    title: ApplicationParameterNumericValue
    description: An ApplicationParameter representing a numeric value
    type: object
    properties:
      type:
        description: The primary type of this parameter
        type: string
        default: number
    required:
      - type
    allOf:
      - $ref: '#/definitions/AbstractApplicationParameterValue'
  ApplicationParameterFlagValue:
    title: ApplicationParameterFlagValue
    description: An ApplicationParameter representing a flag value
    type: object
    properties:
      type:
        description: The primary type of this parameter
        type: string
        default: flag
    required:
      - type
    allOf:
      - $ref: '#/definitions/AbstractApplicationParameterValue'
  JobStatusType:
    title: JobStatusType
    type: string
    enum:
      - PENDING
      - STAGING_INPUTS
      - CLEANING_UP
      - ARCHIVING
      - STAGING_JOB
      - FINISHED
      - KILLED
      - FAILED
      - STOPPED
      - RUNNING
      - PAUSED
      - QUEUED
      - SUBMITTING
      - STAGED
      - PROCESSING_INPUTS
      - ARCHIVING_FINISHED
      - ARCHIVING_FAILED
      - HEARTBEAT
  MonitorCheckResultType:
    title: MonitorCheckResultType
    type: string
    enum:
      - FAILED
      - PASSED
      - UNKNOWN
  term:
    title: term
    type: string
    enum:
      - username
      - email
      - name
  term3:
    title: term3
    type: string
    enum:
      - username
      - email
      - name
      - status
  SystemCredentialType:
    title: SystemCredentialType
    type: string
    enum:
      - LOGIN
      - STORAGE
  Client:
    title: Client
    type: object
    properties:
      key:
        description: The API key for this client.
        type: string
      secret:
        description: The API secret for this client.
        type: string
      callbackUrl:
        description: Callback URL for OAuth authentication grant.
        type: string
      description:
        description: Description of the client. This will be shown to users when authentication via OAuth web flows
        type: string
      name:
        description: The name of the client.
        type: string
      tier:
        description: The access tier for this client.
        type: string
    required:
      - key
      - secret
      - callbackUrl
      - description
      - name
      - tier
  ClientSubscriptionTier:
    title: ClientSubscriptionTier
    type: string
    enum:
      - BRONZE
      - GOLD
      - SILVER
      - UNLIMITED
  ClientRequest:
    title: ClientRequest
    type: object
    properties:
      name:
        description: The name of the client.
        type: string
      description:
        description: Description of the client. This will be shown to users when authentication via OAuth web flows
        type: string
      tier:
        $ref: '#/definitions/ClientSubscriptionTier'
      callbackUrl:
        description: Callback URL for OAuth authentication grant.
        type: string
    required:
      - name
      - description
      - tier
      - callbackUrl
  ClientAPISubscription:
    title: ClientAPISubscription
    type: object
    properties:
      apiContext:
        description: The base url path of the API.
        type: string
      apiName:
        description: The name of the API.
        type: string
      apiProvider:
        description: The user who registered the API.
        type: string
      apiVersion:
        description: The current major version of the API. This is appended to the api_context to create the base API url.
        type: string
      status:
        $ref: '#/definitions/ClientAPISubscriptionStatusType'
      tier:
        $ref: '#/definitions/ClientSubscriptionTier'
    required:
      - apiContext
      - apiName
      - apiProvider
      - apiVersion
      - status
      - tier
  ClientSubscriptionRequest:
    title: ClientSubscriptionRequest
    type: object
    properties:
      apiName:
        description: The name of the API.
        type: string
      apiProvider:
        description: The user who registered the API.
        type: string
      apiVersion:
        description: The current major version of the API. This is appended to the api_context to create the base API url.
        type: string
      tier:
        $ref: '#/definitions/ClientSubscriptionTier'
    required:
      - apiName
      - apiProvider
      - apiVersion
      - tier
  SingleClientResponse:
    title: SingleClientResponse
    type: object
    properties:
      message:
        description: success or failure
        type: string
      result:
        $ref: '#/definitions/Client'
      status:
        description: success or failure
        type: string
    required:
      - message
      - result
      - status
  MultipleClientResponse:
    title: MultipleClientResponse
    type: object
    properties:
      message:
        description: success or failure
        type: string
      result:
        description: List of clients
        type: array
        items:
          $ref: '#/definitions/Client'
      status:
        description: success or failure
        type: string
    required:
      - message
      - result
      - status
  EmptyClientResponse:
    title: EmptyClientResponse
    type: object
    properties:
      message:
        description: success or failure
        type: string
      result:
        type: string
      status:
        description: success or failure
        type: string
    required:
      - message
      - result
      - status
  MultipleSubscriptionResponse:
    title: MultipleSubscriptionResponse
    type: object
    properties:
      message:
        description: success or failure
        type: string
      result:
        description: List of subscriptions
        type: array
        items:
          $ref: '#/definitions/ClientAPISubscription'
      status:
        description: success or failure
        type: string
    required:
      - message
      - result
      - status
  SingleSubscriptionResponse:
    title: SingleSubscriptionResponse
    type: object
    properties:
      message:
        description: success or failure
        type: string
      result:
        $ref: '#/definitions/ClientAPISubscription'
      status:
        description: success or failure
        type: string
    required:
      - message
      - result
      - status
  EmptySubscriptionResponse:
    title: EmptySubscriptionResponse
    type: object
    properties:
      message:
        description: success or failure
        type: string
      result:
        type: string
      status:
        description: success or failure
        type: string
    required:
      - message
      - result
      - status
  ACL:
    title: ACL
    type: object
    properties:
      execute:
        description: can execute
        type: boolean
      read:
        description: can read
        type: boolean
      write:
        description: can write
        type: boolean
    required:
      - execute
      - read
      - write
  ApplicationSummary:
    title: ApplicationSummary
    description: An abbreviated Application object returned in request in application collection queries
    type: object
    properties:
      id:
        description: Unique id of this app. Comprised of the app name-version.
        type: string
      executionSystem:
        description: The system id of the execution system where this app should run.
        type: string
      lastModified:
        description: The date this application was last modified in ISO 8601 format.
        type: string
        format: date-time
      name:
        description: 'The name of the application. The name does not have to be unique, but the combination of name and version does.'
        type: string
      isPublic:
        description: Whether the application is public or private.
        type: boolean
      revision:
        description: The number of times this application has been revised.
        type: integer
        format: int64
      shortDescription:
        description: The short description of this application.
        type: string
      version:
        description: 'The version of the application in #.#.# format. While the version does not need to be unique, the combination of name and version does have to be unique.'
        type: string
    required:
      - id
      - executionSystem
      - lastModified
      - name
      - isPublic
      - revision
      - shortDescription
      - version
  SystemExecutionType:
    title: SystemExecutionType
    type: string
    enum:
      - CLI
      - CONDOR
      - HPC
  ApplicationParallelism:
    title: ApplicationParallelism
    type: string
    enum:
      - PARALLEL
      - PTHREAD
      - SERIAL
  Application:
    title: Application
    description: 'Applications are a self-describing representation of an executable software item. See the <a href="http://agaveapi.co/documentation/tutorials/app-management-tutorial/">App Management Tutorial</a> for more information.'
    type: object
    properties:
      available:
        description: Whether the application is available.
        type: string
      checkpointable:
        description: Whether the application supports checkpointing.
        type: string
      defaultMaxRunTime:
        description: The max execution time that should be used if none is given in a job description. Ignore if the system does not support schedulers.
        type: string
      defaultMemoryPerNode:
        description: The default memory in GB to pass to the scheduler if none is given in the job description. This must be less than the max memory parameter in the target queue definition.
        type: string
      defaultNodeCount:
        description: The number of nodes that should be used if none is given in a job description. Ignore if the system does not support schedulers.
        type: string
      defaultProcessorsPerNode:
        description: The number of processors to pass to the scheduler if none are given in the job description. This must be 1 if the app is serial.
        type: string
      defaultQueue:
        description: The queue on the execution system that should be used if none is given in a job description. Ignore if the system does not support schedulers.
        type: string
      deploymentPath:
        description: 'The location in default storage system containing the application wrapper and dependencies of the user'
        type: string
      deploymentSystem:
        description: The system id of the storage system where this app should run.
        type: string
      executionSystem:
        description: The system id of the execution system where this app should run.
        type: string
      executionType:
        description: 'The execution type of the application. If you''re unsure, it''s probably HPC.'
        type: string
      helpURI:
        description: The URL where users can go for more information about the app.
        type: string
      id:
        description: Unique id of this app. Comprised of the app name-version.
        type: string
      icon:
        description: The icon to associate with this app.
        type: string
      inputs:
        description: 'The inputs files for this application. '
        type: string
      label:
        description: The label to use when generating forms.
        type: string
      lastModified:
        description: The date this application was last modified in ISO 8601 format.
        type: string
      longDescription:
        description: The full text description of this input to use when generating forms.
        type: string
      modules:
        description: An array of modules to load prior to the execution of the application.
        type: string
      name:
        description: 'The name of the application. The name does not have to be unique, but the combination of name and version does.'
        type: string
      ontology:
        description: An array of ontology values describing this application.
        type: string
      outputs:
        description: 'The outputs files for this application. '
        type: string
      parallelism:
        description: 'The parallelism type of the application. If you''re unsure, it''s probably SERIAL.'
        type: string
      parameters:
        description: 'The inputs parameters for this application. '
        type: string
      isPublic:
        description: Whether the application is public or private.
        type: string
      revision:
        description: The number of times this application has been revised.
        type: string
      shortDescription:
        description: The short description of this application.
        type: string
      tags:
        description: An array of tags related to this application.
        type: string
      templatePath:
        description: The path to the wrapper script relative to the deploymentPath.
        type: string
      testPath:
        description: The path to the test script relative to the deploymentPath.
        type: string
      uuid:
        description: The UUID of this application. UUID are 36 alphanumeric string.
        type: string
      version:
        description: 'The version of the application in #.#.# format. While the version does not need to be unique, the combination of name and version does have to be unique.'
        type: string
    required:
      - available
      - checkpointable
      - defaultMaxRunTime
      - defaultMemoryPerNode
      - defaultNodeCount
      - defaultProcessorsPerNode
      - defaultQueue
      - deploymentPath
      - deploymentSystem
      - executionSystem
      - executionType
      - helpURI
      - id
      - icon
      - inputs
      - label
      - lastModified
      - longDescription
      - modules
      - name
      - ontology
      - outputs
      - parallelism
      - parameters
      - isPublic
      - revision
      - shortDescription
      - tags
      - templatePath
      - testPath
      - uuid
      - version
  ApplicationInput:
    title: ApplicationInput
    description: 'App inputs describe data inputs supported by your app. Each input can represent one or more files or folders. Inptus can be optional or required and may physically reside anywhere accessible using any of the data protocols supported by Agave.  <a href="http://agaveapi.co/documentation/tutorials/app-management-tutorial/#app-inputs">Read more.</a>'
    type: object
    properties:
      semantics:
        $ref: '#/definitions/ApplicationArgumentDataSemantics'
    allOf:
      - $ref: '#/definitions/ApplicationArgument'
  ApplicationArgumentDetails:
    title: ApplicationArgumentDetails
    type: object
    properties:
      description:
        description: Description of this input.
        type: string
      label:
        description: The label for this input
        type: string
      argument:
        description: 'The command line value of this input (ex -n, --name, -name, etc)'
        type: string
      showArgument:
        description: Whether the argument value should be passed into the wrapper at run time
        type: boolean
        default: false
      repeatArgument:
        description: Whether the argument value should be repeated in front of each user-supplied input before injection into the wrapper template at runtime
        type: boolean
        default: false
    required:
      - showArgument
      - repeatArgument
  ApplicationArgumentValue:
    title: ApplicationArgumentValue
    description: 'Describes the validation, default value, and primary types associated with this ApplicationArgument'
    type: object
    properties:
      defaultValue:
        description: The default value for this parameter. The type will be determined by the value.type field.
        type: array
        items:
          type: string
      enquote:
        description: Whether the argument value should be surrounded by quotation marks before injection into the wrapper template at runtime
        type: boolean
        default: false
      order:
        description: The order in which this parameter should be printed when generating an execution command for forked execution. This will also be the order in which paramters are returned in the response json.
        type: integer
        default: 0
        format: int64
      required:
        description: 'Is this parameter required? If visible is false, this must be true.'
        type: boolean
        default: false
      validator:
        description: 'The regular expression used to validate this parameter value. For enumerations, separate values with |'
        type: string
      visible:
        description: 'Should this parameter be visible? If not, there must be a default and it will be required.'
        type: boolean
        default: true
    required:
      - enquote
      - order
      - required
      - visible
  AbstractApplicationParameterValue:
    title: AbstractApplicationParameterValue
    type: object
    properties:
      defaultValue:
        description: The default value for this parameter. The type will be determined by the value.type field.
        type: string
      enumValues:
        description: An array of enumerated object values.
        type: string
      enquote:
        description: Whether the argument value should be surrounded by quotation marks before injection into the wrapper template at runtime
        type: boolean
        default: false
      order:
        description: The order in which this parameter should be printed when generating an execution command for forked execution. This will also be the order in which paramters are returned in the response json.
        type: integer
        default: 0
        format: int64
      required:
        description: 'Is this parameter required? If visible is false, this must be true.'
        type: boolean
        default: false
      type:
        description: 'The type of this parameter value. (Acceptable values are: "string", "number", "enumeration", "bool", "flag")'
        type: string
        default: string
      validator:
        description: 'The regular expression used to validate this parameter value. For enumerations, separate values with |'
        type: string
      visible:
        description: 'Should this parameter be visible? If not, there must be a default and it will be required.'
        type: boolean
        default: true
    required:
      - enquote
      - order
      - required
      - type
      - visible
  AgaveResponse:
    title: AgaveResponse
    description: This is the wrapper within which all API responses are returned.
    type: object
    properties:
      message:
        description: success or failure
        type: string
      status:
        description: success or failure
        type: string
        default: success
      version:
        description: The current api version
        type: string
    required:
      - status
      - version
  EmptyApplicationResponse:
    title: EmptyApplicationResponse
    type: object
    properties:
      message:
        description: success or failure
        type: string
      result:
        description: empty result
        type: string
      status:
        description: success or failure
        type: string
    required:
      - message
      - result
      - status
  MultipleApplicationResponse:
    title: MultipleApplicationResponse
    type: object
    properties:
      message:
        description: success or failure
        type: string
      result:
        description: response body
        type: array
        items:
          $ref: '#/definitions/ApplicationSummary'
      status:
        description: success or failure
        type: string
    required:
      - message
      - result
      - status
  PermissionType:
    title: PermissionType
    type: string
    enum:
      - ALL
      - EXECUTE
      - NONE
      - READ
      - READ_EXECUTE
      - READ_WRITE
      - WRITE
      - WRITE_EXECUTE
  EmptyRemoteFileResponse:
    title: EmptyRemoteFileResponse
    type: object
    properties:
      message:
        description: success or failure
        type: string
      result:
        description: empty result
        type: string
      status:
        description: success or failure
        type: string
    required:
      - message
      - result
      - status
  FileHistoryResponse:
    title: FileHistoryResponse
    type: object
    properties:
      result:
        description: response body
        type: array
        items:
          $ref: '#/definitions/HistoryEvent'
    required:
      - result
    allOf:
      - $ref: '#/definitions/AgaveResponse'
  MultipleRemoteFileResponse:
    title: MultipleRemoteFileResponse
    type: object
    properties:
      message:
        description: success or failure
        type: string
      result:
        description: response body
        type: array
        items:
          $ref: '#/definitions/FileInfo'
      status:
        description: success or failure
        type: string
    required:
      - message
      - result
      - status
  FileInfo:
    title: FileInfo
    description: Basic metadata description of a remote file or folder
    type: object
    properties:
      format:
        description: The file type of the file.
        type: string
      lastModified:
        description: The date this file was last modified in ISO 8601 format.
        type: string
        format: date-time
      length:
        description: The length of the file/folder.
        type: integer
        format: int64
      mimeType:
        description: 'The mime type of the file/folder. If unknown, it defaults to application/binary.'
        type: string
      name:
        description: The name of the file/folder.
        type: string
      path:
        description: The absolute path to the file/folder.
        type: string
      permissions:
        description: The remote system permission of the invoking user on the file/folder.
        type: string
      system:
        description: The id of the system where this file lives.
        type: string
      type:
        $ref: '#/definitions/FileType'
    required:
      - format
      - lastModified
      - length
      - mimeType
      - name
      - path
      - permissions
      - system
      - type
  SingleRemoteFileResponse:
    title: SingleRemoteFileResponse
    type: object
    properties:
      message:
        description: success or failure
        type: string
      result:
        $ref: '#/definitions/FileInfo'
      status:
        description: success or failure
        type: string
    required:
      - message
      - result
      - status
  MultiplePermissionResponse:
    title: MultiplePermissionResponse
    type: object
    properties:
      message:
        description: success or failure
        type: string
      result:
        description: One or more file permissions
        type: array
        items:
          $ref: '#/definitions/FilePermission'
      status:
        description: success or failure
        type: string
    required:
      - message
      - result
      - status
  PermissionRequest:
    title: PermissionRequest
    description: A permission request for a given user on the given resource
    type: object
    properties:
      username:
        description: The name of the user for this permission object.
        type: string
      permission:
        $ref: '#/definitions/PermissionType'
    required:
      - username
      - permission
  PermissionStanza:
    title: PermissionStanza
    description: A minimal permission stanza defining read and write permissions
    type: object
    properties:
      read:
        description: Is the resource readable
        type: boolean
        default: false
      write:
        description: Is the resource writable
        type: boolean
        default: false
    required:
      - read
      - write
  FilePermissionRequest:
    title: FilePermissionRequest
    description: The permission to apply for the given user onthe given resource
    type: object
    properties:
      recursive:
        description: Should updated permissions be applied recursively. Defaults to false.
        type: boolean
    required:
      - recursive
    allOf:
      - $ref: '#/definitions/PermissionRequest'
  FileManagementActionType:
    title: FileManagementActionType
    type: string
    enum:
      - MKDIR
      - RENAME
      - COPY
      - MOVE
  FileAction:
    title: FileAction
    description: A generic action to take on a file item
    type: object
    properties:
      action:
        $ref: '#/definitions/FileManagementActionType'
      path:
        description: Name of new directory or target file or folder.
        type: string
    required:
      - action
      - path
  Job:
    title: Job
    type: object
    properties:
      appId:
        description: The unique name of the application being run by this job. This must be a valid application that the calling user has permission to run.
        type: string
      archive:
        description: 'Whether the output from this job should be archived. If true, all new files created by this application''s execution will be archived to the archivePath in the user''s default storage system.'
        type: boolean
      archivePath:
        description: 'The path of the archive folder for this job on default storage sytem of the user'
        type: string
      archiveSystem:
        description: The unique id of the storage system on which this job output will be staged.
        type: string
      batchQueue:
        description: The queue to which this job should be submitted. This is optional and only applies when the execution system has a batch scheduler.
        type: string
      endTime:
        description: 'The date the job stopped running due to termination, completion, or error in ISO 8601 format.'
        type: string
        format: date-time
      executionSystem:
        description: The system id of the execution system.
        type: string
      id:
        description: The unique id of the job.
        type: integer
        format: int64
      inputs:
        $ref: '#/definitions/JobInputs'
      localId:
        description: The process or local job id of the job on the remote execution system.
        type: string
      memoryPerNode:
        description: The requested memory for this application to run given in GB.
        type: string
      message:
        description: The error message incurred when the job failed.
        type: string
      name:
        description: The name of the job.
        type: string
      nodeCount:
        description: 'The number of processors this application should utilize while running. If the application is not of executionType PARALLEL, this should be 1.'
        type: integer
        format: int64
      notifications:
        description: An array of notifications you wish to receive.
        type: array
        items:
          $ref: '#/definitions/Notification'
      outputPath:
        description: Relative path of the job output data.
        type: string
      owner:
        description: The job owner.
        type: string
      parameters:
        $ref: '#/definitions/JobParameters'
      processorsPerNode:
        description: 'The number of processors this application should utilize while running. If the application is not of executionType PARALLEL, this should be 1.'
        type: integer
        format: int64
      maxRunTime:
        description: 'The requested compute time needed for this application to complete given in HH:mm:ss format.'
        type: string
      retries:
        description: The number of retires it took to submit this job.
        type: integer
        format: int64
      startTime:
        description: The date the job started in ISO 8601 format.
        type: string
        format: date-time
      status:
        description: 'The status of the job. Possible values are: PENDING, STAGING_INPUTS, CLEANING_UP, ARCHIVING, STAGING_JOB, FINISHED, KILLED, FAILED, STOPPED, RUNNING, PAUSED, QUEUED, SUBMITTING, STAGED, PROCESSING_INPUTS, ARCHIVING_FINISHED, ARCHIVING_FAILED'
        type: string
      submitTime:
        description: The date the job was submitted in ISO 8601 format.
        type: string
        format: date-time
      workPath:
        description: The directory on the remote execution system from which the job is running.
        type: string
    required:
      - appId
      - archive
      - archivePath
      - archiveSystem
      - batchQueue
      - endTime
      - executionSystem
      - id
      - inputs
      - localId
      - memoryPerNode
      - message
      - name
      - nodeCount
      - notifications
      - outputPath
      - owner
      - parameters
      - processorsPerNode
      - maxRunTime
      - retries
      - startTime
      - status
      - submitTime
      - workPath
  JobRequest:
    title: JobRequest
    description: A request to run a registered app.
    type: object
    properties:
      appId:
        description: The unique name of the application being run by this job. This must be a valid application that the calling user has permission to run.
        type: string
      archive:
        description: 'Whether the output from this job should be archived. If true, all new files created by this application''s execution will be archived to the archivePath in the user''s default storage system.'
        type: boolean
        default: true
      archivePath:
        description: 'The path of the archive folder for this job on default storage sytem of the user'
        type: string
      archiveSystem:
        description: The unique id of the storage system on which this job output will be staged.
        type: string
      batchQueue:
        description: The queue to which this job should be submitted. This is optional and only applies when the execution system has a batch scheduler.
        type: string
      inputs:
        description: 'The application specific input files needed for this job. These vary from application to application and should be entered as multiple individual parameters in the form. Inputs may be given as relative paths in the user''s default storage system or as URI. If a URI is given, the data will be staged in by the IO service and made avaialble to the application at run time.'
        type: object
      memoryPerNode:
        description: The requested memory for this application to run given in GB.
        type: integer
        format: int64
      name:
        description: The name of the job.
        type: string
      nodeCount:
        description: 'The number of processors this application should utilize while running. If the application is not of executionType PARALLEL, this should be 1.'
        type: integer
        format: int64
      notifications:
        description: An array of notifications you wish to receive.
        type: array
        items:
          $ref: '#/definitions/Notification'
      parameters:
        description: The application specific parameters needed for this job. These vary from application to application and should be entered as multiple individual parameters in the form. The actual dataType will be determined by the application description.
        type: object
      processorsPerNode:
        description: 'The number of processors this application should utilize while running. If the application is not of executionType PARALLEL, this should be 1.'
        type: integer
        format: int64
      maxRunTime:
        description: 'The requested compute time needed for this application to complete given in HH:mm:ss format.'
        type: string
    required:
      - appId
      - archive
      - name
      - notifications
  JobHistory:
    title: JobHistory
    type: object
    properties:
      created:
        description: The date of the event.
        type: string
        format: date-time
      description:
        description: A brief description of the event details.
        type: string
      status:
        description: The status of the job after this event.
        type: string
    required:
      - created
      - description
      - status
  JobSubmission:
    title: JobSubmission
    description: This represents the request made to the Agave jobs api to run a registered application.
    type: object
    properties:
      archive:
        description: 'Whether the output from this job should be archived. If true, all new files created by this application''s execution will be archived to the archivePath in the user''s default storage system.'
        type: boolean
      archivePath:
        description: 'The path of the archive folder for this job on the archiveSystem. Defaults to default storage system of the user'
        type: string
      archiveSystem:
        description: The system on which the job data will be archived
        type: string
      inputs:
        description: 'The application specific input files needed for this job. These vary from application to application and should be entered as multiple individual parameters in the form. Inputs may be given as relative paths in the user''s default storage system or as URI. If a URI is given, the data will be staged in by the IO service and made avaialble to the application at run time.'
        type: string
      name:
        description: The name of the job.
        type: string
      maxMemory:
        description: The maximum amount of memory needed for this application to run given in GB.
        type: string
      nodeCount:
        description: 'The number of nodes this application should utilize while running. If the application is not of executionType PARALLEL, this should be 1.'
        type: integer
        format: int64
      notifications:
        description: An array of notifications you wish to receive.
        type: array
        items:
          $ref: '#/definitions/Notification'
      parameters:
        description: The application specific parameters needed for this job. These vary from application to application and should be entered as multiple individual parameters in the form. The actual dataType will be determined by the application description.
        type: object
      processorsPerNode:
        description: The number of processors this application should utilize while running.
        type: integer
        format: int64
      batchQueue:
        description: The queue to which this job should be submitted. This is optional and only applies when the execution system has a batch scheduler.
        type: string
      maxRunTime:
        description: 'The estimated compute time needed for this application to complete given in hh:mm:ss format.'
        type: string
      appId:
        description: The unique name of the application being run by this job. This must be a valid application that the calling user has permission to run.
        type: string
    required:
      - archive
      - archivePath
      - archiveSystem
      - inputs
      - name
      - maxMemory
      - nodeCount
      - notifications
      - parameters
      - processorsPerNode
      - batchQueue
      - maxRunTime
      - appId
  JobParameters:
    title: JobParameters
    type: object
    properties:
      parameter1:
        description: 'One or more parameters identified in the description of the app you''re running. '
        type: string
    required:
      - parameter1
  JobInputs:
    title: JobInputs
    type: object
    properties:
      parameter1:
        description: 'One or more inputs identified in the description of the app you''re running. '
        type: string
    required:
      - parameter1
  JobSummary:
    title: JobSummary
    type: object
    properties:
      appId:
        description: The unique name of the application being run by this job. This must be a valid application that the calling user has permission to run.
        type: string
      endTime:
        description: The date the job ended in ISO 8601 format.
        type: string
        format: date-time
      executionSystem:
        description: The system id of the execution system.
        type: string
      id:
        description: The unique id of the job.
        type: integer
        format: int64
      name:
        description: The name of the job.
        type: string
      owner:
        description: The job owner.
        type: string
      startTime:
        description: The date the job started in ISO 8601 format.
        type: string
        format: date-time
      status:
        description: 'The status of the job. Possible values are: PENDING, STAGING_INPUTS, CLEANING_UP, ARCHIVING, STAGING_JOB, FINISHED, KILLED, FAILED, STOPPED, RUNNING, PAUSED, QUEUED, SUBMITTING, STAGED, PROCESSING_INPUTS, ARCHIVING_FINISHED, ARCHIVING_FAILED'
        type: string
    required:
      - appId
      - endTime
      - executionSystem
      - id
      - name
      - owner
      - startTime
      - status
  JobStatusSummary:
    title: JobStatusSummary
    type: object
    properties:
      id:
        description: The unique id of the job.
        type: integer
        format: int64
      status:
        description: 'The status of the job. Possible values are: PENDING, STAGING_INPUTS, CLEANING_UP, ARCHIVING, STAGING_JOB, FINISHED, KILLED, FAILED, STOPPED, RUNNING, PAUSED, QUEUED, SUBMITTING, STAGED, PROCESSING_INPUTS, ARCHIVING_FINISHED, ARCHIVING_FAILED'
        type: string
    required:
      - id
      - status
  Notification:
    title: Notification
    type: object
    properties:
      event:
        description: The event you wish to recieve a notification about. Specify * for all events.
        type: string
      persistent:
        description: Whether this event should remain active after it triggers the first time.
        type: boolean
      url:
        description: 'The URI to notify when the import is complete. This can be an email address or URL. If a URL is given, a POST will be made to this address. URL templating is supported. Valid template values are: ${JOB_STATUS}, ${JOB_URL}, ${JOB_ID}, ${JOB_SYSTEM}, ${JOB_NAME}, ${JOB_START_TIME}, ${JOB_END_TIME}, ${JOB_SUBMIT_TIME}, ${JOB_ARCHIVE_PATH}, ${JOB_ARCHIVE_URL}, ${JOB_ERROR}'
        type: integer
        format: int64
    required:
      - event
      - persistent
      - url
  JobActionType:
    title: JobActionType
    description: The type of action to perform on a job.
    type: string
    enum:
      - RESUBMIT
      - STOP
  JobAction:
    title: JobAction
    description: Requests that a management action take place against a job.
    type: object
    properties:
      action:
        $ref: '#/definitions/JobActionType'
    required:
      - action
  Metadata:
    title: Metadata
    type: object
    properties:
      associationIds:
        description: 'UUIDs of associated Agave entities, including the Data to which this Metadata belongs.'
        type: array
        items:
          type: string
      created:
        description: A timestamp indicating when this Metadata was created in the metadata store.
        type: string
        format: date-time
      internalUsername:
        description: 'The name of the Internal User, if any, who owns this metadata.'
        type: string
      lastUpdated:
        description: A timestamp indicating when this Metadata was last updated in the metadata store.
        type: string
        format: date-time
      name:
        description: The name of this metadata
        type: string
      owner:
        description: The API user who owns this Metadata.
        type: string
      uuid:
        description: The UUID for this Metadata.
        type: string
      value:
        description: A free text or JSON string containing the metadata stored for the given associationIds
        type: string
    required:
      - associationIds
      - created
      - internalUsername
      - lastUpdated
      - name
      - owner
      - uuid
      - value
  MetadataSchema:
    title: MetadataSchema
    type: object
    properties:
      created:
        description: A timestamp indicating when this Metadata was created in the metadata schema store.
        type: string
        format: date-time
      internalUsername:
        description: 'The name of the Internal User, if any, who owns this schema.'
        type: string
      lastUpdated:
        description: A timestamp indicating when this Metadata was last updated in the metadata schema store.
        type: string
        format: date-time
      owner:
        description: The API user who owns this Schema.
        type: string
      schema:
        description: A JSON Schema
        type: string
      uuid:
        description: The UUID for this Schema.
        type: string
    required:
      - created
      - internalUsername
      - lastUpdated
      - owner
      - schema
      - uuid
  MonitoringTaskSummary:
    title: MonitoringTaskSummary
    description: A compressed description of a monitoring task
    type: object
    properties:
      active:
        description: Whether this monitor is currently active.
        type: boolean
        default: true
      frequency:
        description: The interval in minutes on which this monitor will run. Minimum is 5. Default is 720.
        type: integer
        format: int64
      internalUsername:
        description: Internal user account used to perform the check.
        type: string
      target:
        description: The id of the sytem to be monitored. This must be an active system registered with the Systems service.
        type: string
      updateSystemStatus:
        description: Whether this Monitor should update the system status when the results change. You must have the ADMIN role on the target system to use this feature.
        type: boolean
        default: false
      id:
        description: The unique id of the monitor
        type: string
    required:
      - active
      - frequency
      - target
      - updateSystemStatus
      - id
  MonitoringTaskCheck:
    title: MonitoringTaskCheck
    description: 'An individual check made for a monitoring task. '
    type: object
    properties:
      created:
        description: A timestamp indicating when this monitor check was created.
        type: string
        format: date-time
      id:
        description: The UUID for this monitor check.
        type: string
      message:
        description: The error message if this monitor check failed.
        type: string
      result:
        $ref: '#/definitions/MonitorCheckResultType'
    required:
      - created
      - id
      - message
      - result
  NotificationRequest:
    title: NotificationRequest
    type: object
    properties:
      associatedUuid:
        description: UUID of resource to whome the event applies.
        type: string
      url:
        description: The url or email address that will be notified of the event.
        type: string
      persistent:
        description: Whether this notification should stay active after it fires the first time.
        type: boolean
    required:
      - associatedUuid
      - url
      - persistent
  NotificationResponse:
    title: NotificationResponse
    type: object
    properties:
      message:
        description: success or failure
        type: string
      result:
        $ref: '#/definitions/Notification'
      status:
        description: success or failure
        type: string
      version:
        description: API version number
        type: string
    required:
      - message
      - result
      - status
      - version
  PostIt:
    title: PostIt
    type: object
    properties:
      created:
        description: The creation date in ISO 8601 format.
        type: string
        format: date-time
      creator:
        description: The api user who made the PostIt creation request.
        type: string
      expires:
        description: The expiration date in ISO 8601 format.
        type: string
        format: date-time
      internalUsername:
        description: The username of the internal user attached to this PostIt.
        type: string
      method:
        description: The url that will be invoked when the PostIt is redeemed.
        type: string
      postit:
        description: The PostIt nonce.
        type: string
      remainingUses:
        description: 'The number of invocations remaining on this token. '
        type: integer
        format: int64
      url:
        description: The url that will be invoked when the PostIt is redeemed.
        type: string
      noauth:
        description: 'If true, the provided url will be called without authentication. Default is false'
        type: boolean
    required:
      - created
      - creator
      - expires
      - internalUsername
      - method
      - postit
      - remainingUses
      - url
      - noauth
  PostItRequestMethod:
    title: PostItRequestMethod
    type: string
    enum:
      - GET
      - PUT
      - POST
      - DELETE
  PostItRequest:
    title: PostItRequest
    type: object
    properties:
      url:
        description: The url that will be invoked when the PostIt is redeemed.
        type: string
      internalUsername:
        description: The username of the internal user attached to this PostIt.
        type: string
      method:
        $ref: '#/definitions/PostItRequestMethod'
      lifetime:
        description: The maximum lifetime in seconds of this PostIt on this token. Defaults to 2592000 (30 days)
        type: integer
        format: int64
      maxUses:
        description: The maximum number of invocations remaining on this PostIt. Defaults to no limit
        type: integer
        format: int64
      noauth:
        description: 'If true, the provided url will be called without authentication. Default is false'
        type: boolean
    required:
      - url
      - internalUsername
      - method
      - lifetime
      - maxUses
      - noauth
  SinglePostItResponse:
    title: SinglePostItResponse
    type: object
    properties:
      message:
        description: success or failure
        type: string
      result:
        $ref: '#/definitions/PostIt'
      status:
        description: success or failure
        type: string
    required:
      - message
      - result
      - status
  InternalUser:
    title: InternalUser
    description: A virtual user profile associated with a concrete api user
    type: object
    properties:
      parent:
        description: The uuid of the parent to which this internal user account belongs
        type: string
      created:
        description: The date the internal user was created
        type: string
        format: date-time
      lastUpdated:
        description: The date the internal user was last updated
        type: string
        format: date-time
    required:
      - parent
      - created
      - lastUpdated
    allOf:
      - $ref: '#/definitions/Profile'
  Gender:
    title: Gender
    type: string
    enum:
      - male
      - female
  ProfileRequest:
    title: ProfileRequest
    description: A profile describing a new user to be created.
    type: object
    properties:
      username:
        description: The unique username of the user
        type: string
      email:
        description: The unique email address of the user
        type: string
      city:
        description: The city of the user
        type: string
      country:
        description: The country of the user
        type: string
      department:
        description: The institutional department of the user
        type: string
      fax:
        description: The fax number of the user
        type: string
      firstName:
        description: The first name of the user
        type: string
      gender:
        $ref: '#/definitions/Gender'
      institution:
        description: The home institution of the user
        type: string
      lastName:
        description: The last name of the user
        type: string
      phone:
        description: The phone number of the user
        type: string
      position:
        description: The position of employment of the user
        type: string
      researchArea:
        description: The primary area of research of the user
        type: string
      state:
        description: The state of the user
        type: string
      status:
        description: The status. active or deleted of the user
        type: string
      password:
        description: The password to set for the new user
        type: string
    required:
      - username
      - email
      - password
  Profile:
    title: Profile
    description: A user profile describing an actual user.
    type: object
    properties:
      city:
        description: The city of the user
        type: string
      country:
        description: The country of the user
        type: string
      department:
        description: The institutional department of the user
        type: string
      email:
        description: The unique email address of the user
        type: string
      fax:
        description: The fax number of the user
        type: string
      firstName:
        description: The first name of the user
        type: string
      gender:
        $ref: '#/definitions/Gender'
      institution:
        description: The home institution of the user
        type: string
      lastName:
        description: The last name of the user
        type: string
      phone:
        description: The phone number of the user
        type: string
      position:
        description: The position of employment of the user
        type: string
      researchArea:
        description: The primary area of research of the user
        type: string
      state:
        description: The state of the user
        type: string
      username:
        description: The unique username of the user
        type: string
      password:
        description: The password to set for this profile
        type: string
      uuid:
        description: The uuid of the user
        type: string
    required:
      - email
      - username
      - uuid
  SingleInternalUserResponse:
    title: SingleInternalUserResponse
    type: object
    properties:
      message:
        description: success or failure
        type: string
      result:
        $ref: '#/definitions/InternalUser'
      status:
        description: success or failure
        type: string
    required:
      - message
      - result
      - status
  SingleProfileResponse:
    title: SingleProfileResponse
    type: object
    properties:
      message:
        description: success or failure
        type: string
      result:
        $ref: '#/definitions/Profile'
      status:
        description: success or failure
        type: string
    required:
      - message
      - result
      - status
  EmptySystemResponse:
    title: EmptySystemResponse
    type: object
    properties:
      message:
        description: success or failure
        type: string
      result:
        description: empty result
        type: string
      status:
        description: success or failure
        type: string
    required:
      - message
      - result
      - status
  MultipleSystemResponse:
    title: MultipleSystemResponse
    type: object
    properties:
      message:
        description: success or failure
        type: string
      result:
        description: response body
        type: array
        items:
          $ref: '#/definitions/SystemSummary'
      status:
        description: success or failure
        type: string
    required:
      - message
      - result
      - status
  SingleSystemResponse:
    title: SingleSystemResponse
    type: object
    properties:
      message:
        description: success or failure
        type: string
      result:
        $ref: '#/definitions/System'
      status:
        description: success or failure
        type: string
    required:
      - message
      - result
      - status
  BatchQueue:
    title: BatchQueue
    type: object
    properties:
      customDirectives:
        description: 'Any custom directives that should be appended to scheduler directives. ex. #$ -A TG-12345'
        type: string
      isDefault:
        description: Is this the default queue for the system.
        type: boolean
      maxJobs:
        description: The maximum number of jobs that can be in queue at once.
        type: integer
        format: int64
      maxUserJobs:
        description: The maximum number of jobs per user that can be in queue at once.
        type: integer
        format: int64
      maxNodes:
        description: The max nodes available per node to jobs submitted to this queue.
        type: string
      maxMemoryPerNode:
        description: The max memory available per node to jobs submitted to this queue.
        type: string
      maxProcessorsPerNode:
        description: The max processors per node available to jobs submitted to this queue.
        type: integer
        format: int64
      maxRequestedTime:
        description: 'The max length of jobs submitted to this queue in hhh:mm:ss format.'
        type: string
      name:
        description: The name of the batch queue.
        type: string
    required:
      - customDirectives
      - isDefault
      - maxJobs
      - maxUserJobs
      - maxNodes
      - maxMemoryPerNode
      - maxProcessorsPerNode
      - maxRequestedTime
      - name
  SystemLoginProtocolType:
    title: SystemLoginProtocolType
    type: string
    enum:
      - GSISSH
      - SSH
      - LOCAL
  SystemLoginConfig:
    title: SystemLoginConfig
    type: object
    properties:
      auth:
        $ref: '#/definitions/SystemAuthConfig'
      host:
        description: The hostname or ip address of the submission server
        type: string
      port:
        description: The port number of the submission server.
        type: integer
        format: int64
      protocol:
        $ref: '#/definitions/SystemLoginProtocolType'
    required:
      - auth
      - host
      - port
      - protocol
  SystemStorageProtocolType:
    title: SystemStorageProtocolType
    type: string
    enum:
      - FTP
      - GRIDFTP
      - IRODS
      - LOCAL
      - S3
      - SFTP
  SystemStorageConfig:
    title: SystemStorageConfig
    type: object
    properties:
      auth:
        $ref: '#/definitions/SystemAuthConfig'
      containerName:
        description: The name of the bucket to interact with when using an object store.
        type: string
      homeDir:
        description: 'The path on the remote system to use as the home directory for all API requests. For cases where the home directory should be dynamically defined, the ${USERNAME} token can be included in the homeDir value to represent the username of the authenticated user. ex. /home/${USERNAME}.'
        type: string
        default: /
      host:
        description: The hostname or ip address of the storage server
        type: string
      port:
        description: The port number of the storage server.
        type: integer
        format: int64
      mirror:
        description: Whether the permissions set on the server should be pushed to the storage system itself. This only applies to IRODS and AWS systems.
        type: boolean
        default: false
      protocol:
        $ref: '#/definitions/SystemStorageProtocolType'
      publicAppsDir:
        description: The path on the remote system where apps will be stored if this is set as the default public storage system.
        type: string
      resource:
        description: The name of the target resource when defining an IRODS system.
        type: string
      rootDir:
        description: The path on the remote system to use as the root for all API requests.
        type: string
        default: /
      zone:
        description: The name of the zone when defining an IRODS system.
        type: string
    required:
      - auth
      - host
      - port
      - protocol
  SystemType:
    title: SystemType
    type: string
    enum:
      - STORAGE
      - EXECUTION
  AuthenticationType:
    title: AuthenticationType
    type: string
    enum:
      - APIKEYS
      - LOCAL
      - PAM
      - PASSWORD
      - SSHKEYS
      - TOKEN
      - X509
      - ANONYMOUS
  SystemCredential:
    title: SystemCredential
    description: Authentication credential for the default or internal user on a system
    type: object
    properties:
      credential:
        description: 'The credential used to authenticate to the remote system. Depending on the authentication protocol of the remote system, this could be an OAuth Token, X.509 certificate, Kerberose token, or an private key..'
        type: string
      expirationDate:
        description: The date the credential expires in ISO 8601 format.
        type: string
        format: date-time
      internalUsername:
        description: The username of the internal user associated with this credential.
        type: string
      isDefault:
        description: Is this the default credential for this internal user of this type on this system?
        type: boolean
      parentType:
        $ref: '#/definitions/SystemType'
      password:
        description: The password on the remote system used to authenticate.
        type: string
      publicKey:
        description: The public ssh key used to authenticate to the remote system.
        type: string
      privateKey:
        description: The public ssh key used to authenticate to the remote system..
        type: string
      server:
        $ref: '#/definitions/SystemAuthConfigServerProtocolType'
      type:
        $ref: '#/definitions/AuthenticationType'
      username:
        description: The local username on the remote system used to authenticate.
        type: string
      valid:
        description: Is the credential still valid or has it expired?.
        type: boolean
      caCerts:
        description: A public URL to the location of the trusted CA certs to use with this credential.
        type: string
    required:
      - credential
      - expirationDate
      - internalUsername
      - isDefault
      - parentType
      - password
      - publicKey
      - privateKey
      - server
      - type
      - username
      - valid
      - caCerts
  SystemStatusType:
    title: SystemStatusType
    type: string
    enum:
      - UP
      - DOWN
      - UNKNOWN
  SystemSummary:
    title: SystemSummary
    type: object
    properties:
      description:
        description: Verbose description of this system.
        type: string
      id:
        description: Unique identifier for this system.
        type: string
      isDefault:
        description: Is the system the default for the authenticated user?
        type: boolean
      isPublic:
        description: Is the system publicly available?
        type: boolean
      name:
        description: Common name for this system.
        type: string
      status:
        $ref: '#/definitions/SystemStatusType'
      type:
        $ref: '#/definitions/SystemType'
    required:
      - description
      - id
      - isDefault
      - isPublic
      - name
      - status
      - type
  ApplicationExecutionType:
    title: ApplicationExecutionType
    type: string
    enum:
      - HPC
      - CONDOR
      - CLI
  BatchSchedulerType:
    title: BatchSchedulerType
    type: string
    enum:
      - COBALT
      - CONDOR
      - FORK
      - LOADLEVELER
      - LSF
      - MOAB
      - PBS
      - SGE
      - SLURM
      - TORQUE
      - UNKNOWN
  System:
    title: System
    type: object
    properties:
      description:
        description: Verbose description of this system.
        type: string
      environment:
        description: Environment variables to set upon login prior to job submission.
        type: string
      id:
        description: Unique identifier for this system.
        type: string
      isDefault:
        description: Is the system the default for the authenticated user?
        type: boolean
        default: false
      isPublic:
        description: Is the system publicly available?
        type: boolean
        default: false
      lastModified:
        description: The date this system was last modified in ISO 8601 format.
        type: string
        format: date-time
      name:
        description: Common name for this system.
        type: string
      revision:
        description: The number of times this app has been updated.
        type: integer
        default: 1
        format: int64
      scratchDir:
        description: The scratch directory where job execution directories will be created at runtime. The workDir is used if this is not specified.
        type: string
      site:
        description: The site associated with this system.
        type: string
      status:
        $ref: '#/definitions/SystemStatusType'
      storage:
        $ref: '#/definitions/SystemStorageConfig'
      type:
        $ref: '#/definitions/SystemType'
      uuid:
        description: The uuid of this system.
        type: string
    required:
      - description
      - id
      - isDefault
      - isPublic
      - lastModified
      - name
      - revision
      - storage
      - type
  SystemRequest:
    title: SystemRequest
    type: object
    properties:
      description:
        description: Verbose description of this system.
        type: string
      environment:
        description: Environment variables to set upon login prior to job submission.
        type: string
      executionType:
        $ref: '#/definitions/SystemExecutionType'
      id:
        description: Unique identifier for this system.
        type: string
      login:
        $ref: '#/definitions/SystemLoginConfig'
      maxSystemJobs:
        description: The maximum number of jobs that can be simultaneously run on the system across all queues.
        type: integer
        format: int64
      maxSystemJobsPerUser:
        description: The maximum number of jobs that can be simultaneously run on the system across all queues by a single user.
        type: integer
        format: int64
      name:
        description: Common name for this system.
        type: string
      queues:
        description: The execution paradigm used to run jobs on this system.
        type: array
        items:
          $ref: '#/definitions/BatchQueue'
      scheduler:
        $ref: '#/definitions/BatchSchedulerType'
      scratchDir:
        description: The scratch directory where job execution directories will be created at runtime. The workDir is used if this is not specified.
        type: string
      site:
        description: The site associated with this system.
        type: string
      startupScript:
        description: Script to be run after login and prior to execution.
        type: string
      status:
        $ref: '#/definitions/SystemStatusType'
      storage:
        $ref: '#/definitions/SystemStorageConfig'
      type:
        $ref: '#/definitions/SystemType'
      workDir:
        description: 'The work directory where job execution directories will be created at runtime. This is used if scratchDir is not specified. If neither are specified, the job directory will be created in the system homeDir.'
        type: string
    required:
      - id
      - name
      - status
      - storage
      - type
  ExecutionSystem:
    title: ExecutionSystem
    description: Represents a system used for running Application codes. Also has the ability to store data and participate in transfer operations.
    type: object
    properties:
      executionType:
        $ref: '#/definitions/SystemExecutionType'
      login:
        $ref: '#/definitions/SystemLoginConfig'
      maxSystemJobs:
        description: The maximum number of jobs that can be simultaneously run on the system across all queues.
        type: integer
        format: int64
      maxSystemJobsPerUser:
        description: The maximum number of jobs that can be simultaneously run on the system across all queues by a single user.
        type: integer
        format: int64
      queues:
        $ref: '#/definitions/BatchQueue'
      scheduler:
        $ref: '#/definitions/BatchSchedulerType'
      scratchDir:
        description: The scratch directory where job execution directories will be created at runtime. The workDir is used if this is not specified.
        type: string
      workDir:
        description: 'The work directory where job execution directories will be created at runtime. This is used if scratchDir is not specified. If neither are specified, the job directory will be created in the system homeDir.'
        type: string
      startupScript:
        description: Script to be run after login and prior to execution.
        type: string
      type:
        $ref: '#/definitions/SystemType'
    required:
      - executionType
      - login
      - queues
      - scheduler
      - type
    allOf:
      - $ref: '#/definitions/System'
  SystemCredentialsResponse:
    title: SystemCredentialsResponse
    type: object
    properties:
      message:
        description: success or failure
        type: string
      result:
        $ref: '#/definitions/SystemCredential'
      status:
        description: success or failure
        type: string
    required:
      - message
      - result
      - status
  MultipleSystemRoleResponse:
    title: MultipleSystemRoleResponse
    type: object
    properties:
      message:
        description: success or failure
        type: string
      result:
        description: All matching roles for this system
        type: array
        items:
          $ref: '#/definitions/SystemRoleRequest'
      status:
        description: success or failure
        type: string
    required:
      - message
      - result
      - status
  SystemRoleType:
    title: SystemRoleType
    type: string
    enum:
      - GUEST
      - USER
      - PUBLISHER
      - ADMIN
      - OWNER
  SystemLoginAuthenticationType:
    title: SystemLoginAuthenticationType
    type: string
    enum:
      - APIKEYS
      - LOCAL
      - PAM
      - PASSWORD
      - SSHKEYS
      - TOKEN
      - X509
  SystemAuthConfig:
    title: SystemAuthConfig
    type: object
    properties:
      credential:
        description: 'The credential used to authenticate to the remote system. Depending on the authentication protocol of the remote system, this could be an OAuth Token, X.509 certificate, Kerberose token, or an private key..'
        type: string
      internalUsername:
        description: The username of the internal user associated with this credential.
        type: string
      password:
        description: The password on the remote system used to authenticate.
        type: string
      publicKey:
        description: The public ssh key used to authenticate to the remote system.
        type: string
      privateKey:
        description: The public ssh key used to authenticate to the remote system..
        type: string
      server:
        $ref: '#/definitions/SystemAuthConfigServer'
      type:
        $ref: '#/definitions/SystemLoginAuthenticationType'
      username:
        description: The local username on the remote system used to authenticate.
        type: string
      caCerts:
        description: A public URL to the location of the trusted CA certs to use with this credential.
        type: string
    required:
      - credential
      - internalUsername
      - password
      - publicKey
      - privateKey
      - server
      - type
      - username
      - caCerts
  SystemAuthConfigServerProtocolType:
    title: SystemAuthConfigServerProtocolType
    type: string
    enum:
      - MYPROXY
      - MPG
  SystemAuthConfigServer:
    title: SystemAuthConfigServer
    type: object
    properties:
      endpoint:
        description: The hostname or ip address of the remote server.
        type: string
      port:
        description: The port number of the remote server..
        type: integer
        format: int64
      protocol:
        $ref: '#/definitions/SystemAuthConfigServerProtocolType'
    required:
      - endpoint
      - port
      - protocol
  SystemActionType:
    title: SystemActionType
    description: The actions available on a system.
    type: string
    enum:
      - PUBLISH
      - UNPUBLISH
      - SETDEFAULT
      - UNSETDEFAULT
      - SETGLOBALDEFAULT
      - UNSETGLOBALDEFAULT
      - CLONE
  SystemAction:
    title: SystemAction
    description: A generic action to apply to a system
    type: object
    properties:
      action:
        $ref: '#/definitions/SystemActionType'
    required:
      - action
  MultipleTransformResponse:
    title: MultipleTransformResponse
    type: object
    properties:
      message:
        description: success or failure
        type: string
      result:
        description: response body
        type: array
        items:
          $ref: '#/definitions/Transform'
      status:
        description: success or failure
        type: string
    required:
      - message
      - result
      - status
  SingleTransformResponse:
    title: SingleTransformResponse
    type: object
    properties:
      message:
        description: success or failure
        type: string
      result:
        $ref: '#/definitions/Transform'
      status:
        description: success or failure
        type: string
    required:
      - message
      - result
      - status
  Transform:
    title: Transform
    type: object
    properties:
      decoders:
        description: The available decoders for this transform.
        type: array
        items:
          $ref: '#/definitions/TransformDecoder'
      description:
        description: Description of this transform.
        type: string
      descriptionurl:
        description: The URL to find out more information.
        type: string
      enabled:
        description: Whether this transform is enabled or not.
        type: boolean
      encoder:
        $ref: '#/definitions/TransformEncoder'
      name:
        description: The name of this transform.
        type: string
      tags:
        description: The tags describing this transform.
        type: array
        items:
          type: string
    required:
      - decoders
      - description
      - descriptionurl
      - enabled
      - encoder
      - name
      - tags
  TransformRequest:
    title: TransformRequest
    type: object
    properties:
      nativeFormat:
        description: 'The original file type of the file. If not given, the file type is assumed to be raw.'
        type: string
      url:
        description: The uri to which the transformed file will be staged.
        type: string
      callbackUrl:
        description: 'The URI to notify when the transfer is complete. This can be an email address or http URL. If a URL is given, a GET will be made to this address. URL templating is supported. Valid template values are: ${NAME}, ${SOURCE_FORMAT}, ${DEST_FORMAT}, ${STATUS}'
        type: string
    required:
      - nativeFormat
      - url
      - callbackUrl
  ApplicationArgumentDataSemantics:
    title: ApplicationArgumentDataSemantics
    description: Describes the semantic definition of this inputs and the filetypes it represents. Multiple ontologies and values are supported.
    type: object
    properties:
      fileTypes:
        description: The file types acceptable for this input.
        type: array
        items:
          type: string
    allOf:
      - $ref: '#/definitions/ApplicationArgumentSemantics'
  ApplicationArgumentSemantics:
    title: ApplicationArgumentSemantics
    description: 'Describes the semantic definition of this input/output and the filetypes it represents. Multiple ontologies and values are supported. <a href="http://agaveapi.co/documentation/tutorials/app-management-tutorial/#app-outputs">Read more.</a>'
    type: object
    properties:
      fileTypes:
        description: The file types acceptable for this output.
        type: array
        items:
          type: string
      maxCardinality:
        description: The maximum number of times this output may appear.
        type: integer
        format: int64
      minCardinality:
        description: The minimum number of times this output may appear. -1 is unlimited
        type: integer
        format: int64
      ontology:
        type: array
        items:
          type: string
    required:
      - fileTypes
      - maxCardinality
      - minCardinality
      - ontology
  ApplicationOutput:
    title: ApplicationOutput
    description: 'In addition to describing the inputs and parameters that your wrapper script requires, it is often helpful to provide the expected outputs when running your app. This is the purpose of the outputs attribute. App outputs specify an array of JSON objects describing the data that should be present when your app completes. It is entirely optional and provided, at this point in time, for reference purpose only.  <a href="http://agaveapi.co/documentation/tutorials/app-management-tutorial/#app-outputs">Read more.</a>'
    type: object
    properties:
      semantics:
        $ref: '#/definitions/ApplicationArgumentDataSemantics'
    required:
      - semantics
    allOf:
      - $ref: '#/definitions/ApplicationArgument'
  ApplicationParameter:
    title: ApplicationParameter
    description: 'App parameters define the command-line arguments (flags, arguments, etc.) needed by your wrapper script in order to properly run your application code. <a href="http://agaveapi.co/documentation/tutorials/app-management-tutorial/#app-parameters">Read more.</a>'
    type: object
    properties:
      value:
        $ref: '#/definitions/AbstractApplicationParameterValue'
    required:
      - value
    allOf:
      - $ref: '#/definitions/ApplicationArgument'
  ApplicationArgument:
    title: ApplicationArgument
    description: 'This is the base model for all Application input, output, and parameter objects.'
    type: object
    properties:
      details:
        $ref: '#/definitions/ApplicationArgumentDetails'
      id:
        description: The id of this argument. This will be the replacement string in your wrapper scripts.
        type: string
      semantics:
        $ref: '#/definitions/ApplicationArgumentSemantics'
      value:
        $ref: '#/definitions/ApplicationArgumentValue'
    required:
      - details
      - id
      - semantics
      - value
  ApplicationParameterType:
    title: ApplicationParameterType
    description: The primary type of the application
    type: string
    enum:
      - STRING
      - NUMBER
      - BOOL
      - FLAG
  ApplicationParameterEnumValueItem:
    title: ApplicationParameterEnumValueItem
    description: 'Enumerated single attribute object representing an enumeration value for an ApplicationParamaeterEnumValue. While a single pimary type may be specified, an ApplicationParameterEnumValueItem is the recommended structure as it allows for better display for consumers rendering enumerated values as HTML select elemetns.'
    type: object
    properties:
      key:
        description: The enumerated value.
        type: string
      value:
        description: The value of the enumeration to display in a dropdown list
        type: string
    required:
      - key
      - value
  ApplicationActionType:
    title: ApplicationActionType
    type: string
    enum:
      - CLONE
      - PUBLISH
      - UNPUBLISH
      - ENABLE
      - DISABLE
  SystemRoleRequest:
    title: SystemRoleRequest
    description: A basic role granted to a user for a particular system
    type: object
    properties:
      username:
        description: The username of the api user granted this role.
        type: string
      role:
        $ref: '#/definitions/SystemRoleType'
    required:
      - username
      - role
  TransferTaskProgressSummary:
    title: TransferTaskProgressSummary
    description: This represents a rollup of a data transfer operation.
    type: object
    properties:
      averageRate:
        description: Average transfer rate in bytes/sec
        type: integer
        default: 0
        format: int64
      source:
        description: The source URL of the transfer operation
        type: string
      totalActiveTransfers:
        description: The number of concurrent transfers behind this transfer task
        type: integer
        default: 0
        format: int64
      totalBytes:
        description: The total number of bytes to be transferred
        type: integer
        default: 0
        format: int64
      totalBytesTransferred:
        description: The total number of bytes transferred thus far
        type: integer
        default: 0
        format: int64
      totalFiles:
        description: The total number of files transferred to date
        type: integer
        default: 0
        format: int64
      uuid:
        description: The id of the transfer task associated with this object
        type: string
    required:
      - averageRate
      - source
      - totalActiveTransfers
      - totalBytes
      - totalBytesTransferred
      - totalFiles
      - uuid
  TransformEncoder:
    title: TransformEncoder
    type: object
    properties:
      description:
        description: The description of what this encoder is and what it does.
        type: string
      name:
        description: The encoder name.
        type: string
    required:
      - description
      - name
  FilesStatusType:
    title: FilesStatusType
    type: string
    enum:
      - PREPROCESSING
      - STAGING_QUEUED
      - STAGING
      - STAGING_COMPLETED
      - STAGING_FAILED
      - TRANSFORMING_QUEUED
      - TRANSFORMING
      - TRANSFORMING_FAILED
      - TRANSFORMING_COMPLETED
  FileMkdirAction:
    title: FileMkdirAction
    description: Request for a new directory to be created on the target system. This will recursively create missing directories.
    type: object
    properties:
      path:
        description: Absolute or relative path of the new directory
        type: string
      action:
        $ref: '#/definitions/FileManagementActionType'
    required:
      - path
      - action
    allOf:
      - $ref: '#/definitions/FileAction'
  FileRenameAction:
    title: FileRenameAction
    description: 'Request for a file/folder to be renamed on the target system. Metadata will be preserved after rename. Rename operations are only applied relative to the file/folder given in the URL. To rename a file/folder to a different path, see the FileMoveAction.'
    type: object
    properties:
      path:
        description: 'New name of the file or folder specified in the URL. '
        type: string
      action:
        $ref: '#/definitions/FileManagementActionType'
    required:
      - path
      - action
    allOf:
      - $ref: '#/definitions/FileAction'
  FileMoveAction:
    title: FileMoveAction
    description: Request for a file/folder to be moved on the target system. Metadata will be preserved after move.
    type: object
    properties:
      path:
        description: 'The relative or absolute path of the renamed file/folder. '
        type: string
      action:
        $ref: '#/definitions/FileManagementActionType'
    required:
      - path
      - action
    allOf:
      - $ref: '#/definitions/FileAction'
  FileCopyAction:
    title: FileCopyAction
    description: 'Request for a file/folder to be copied on the target system. Metadata will be appended to the destination if it already exists. Otherwise, a new history will be created.'
    type: object
    properties:
      path:
        description: 'New name of the file or folder specified in the URL. '
        type: string
      action:
        $ref: '#/definitions/FileManagementActionType'
      append:
        description: True if the contents of the source file should be appended to the end of file given in the URL.
        type: boolean
        default: false
    required:
      - path
      - action
      - append
    allOf:
      - $ref: '#/definitions/FileAction'
  ClientAPISubscriptionStatusType:
    title: ClientAPISubscriptionStatusType
    type: string
    enum:
      - CREATED
      - PROTOTYPED
      - PUBLISHED
      - DEPRECATED
      - RETIRED
      - BLOCKED
  TransformDecoder:
    title: TransformDecoder
    type: object
    properties:
      description:
        description: The description of what this decoder is and what it does.
        type: string
      name:
        description: The decoder name.
        type: string
    required:
      - description
      - name
  AgaveNullResponse:
    title: AgaveNullResponse
    description: Null response from the API
    type: object
    properties:
      result:
        type: string
    allOf:
      - $ref: '#/definitions/AgaveResponse'
  ApplicationAction:
    title: ApplicationAction
    description: Generic action to take on an app
    type: object
    properties:
      action:
        $ref: '#/definitions/ApplicationActionType'
    required:
      - action
  ApplicationPublishAction:
    title: ApplicationPublishAction
    description: Publishes an app into the public space for anyone to use.
    type: object
    properties:
      name:
        description: The new name of the app after publication
        type: string
      version:
        description: The new version of the app after publication
        type: string
      executionSystem:
        description: The id of the public system on which this app will run after publication
        type: string
      action:
        $ref: '#/definitions/ApplicationActionType'
    allOf:
      - $ref: '#/definitions/ApplicationAction'
  ApplicationCloneAction:
    title: ApplicationCloneAction
    description: Clones an existing app for private use.
    type: object
    properties:
      name:
        description: The new name of the app after cloning
        type: string
      version:
        description: The new version of the app after cloning
        type: string
      executionSystem:
        description: The id of the private system on which this app will run after publication
        type: string
      deploymentSystem:
        description: The id of the system on which the app assets will be stored after cloning
        type: string
      deploymentPath:
        description: The path on the deployment system where the app assets will be copied during cloning
        type: string
      action:
        $ref: '#/definitions/ApplicationActionType'
    allOf:
      - $ref: '#/definitions/ApplicationAction'
  ApplicationEnableAction:
    title: ApplicationEnableAction
    description: Make a disabled application available once again.
    type: object
    properties:
      action:
        $ref: '#/definitions/ApplicationActionType'
    allOf:
      - $ref: '#/definitions/ApplicationAction'
  ApplicationDisableAction:
    title: ApplicationDisableAction
    description: Disables an app from use.
    type: object
    properties:
      action:
        $ref: '#/definitions/ApplicationActionType'
    allOf:
      - $ref: '#/definitions/ApplicationAction'
  ApplicationUnpublishAction:
    title: ApplicationUnpublishAction
    description: 'Removes an app from the public scope. '
    type: object
    properties:
      action:
        $ref: '#/definitions/ApplicationActionType'
    allOf:
      - $ref: '#/definitions/ApplicationAction'
  FileType:
    title: FileType
    description: The type of the remote file/folder
    type: string
    enum:
      - FILE
      - DIR
      - UNKNOWN
  JobStopAction:
    title: JobStopAction
    description: Requests that a currently active job be killed.
    type: object
    properties:
      action:
        $ref: '#/definitions/JobActionType'
    required:
      - action
    allOf:
      - $ref: '#/definitions/JobAction'
  JobResubmitAction:
    title: JobResubmitAction
    description: Resubmits the given job as a new job with a unique id. The archive system and path are reset. All other fields remain unchanged. Notifications set for the original job will not carry over.
    type: object
    properties:
      action:
        $ref: '#/definitions/JobActionType'
    required:
      - action
    allOf:
      - $ref: '#/definitions/JobAction'
  MonitoringTaskDetails:
    title: MonitoringTaskDetails
    description: Detailed description of a monitoring task
    type: object
    properties:
      id:
        description: The unique id of the monitoring task
        type: string
      lastSuccess:
        description: The last time the monitoring task had a successful check
        type: string
        format: date-time
      lastUpdated:
        description: The last time the monitor was updated
        type: string
        format: date-time
      nextUpdate:
        description: The next time the check will run
        type: string
        format: date-time
      owner:
        description: The user who created the monitoring task
        type: string
      lastCheck:
        $ref: '#/definitions/MonitoringTaskCheck'
    required:
      - id
      - lastSuccess
      - lastUpdated
      - nextUpdate
      - owner
    allOf:
      - $ref: '#/definitions/MonitoringTaskSummary'
  StorageSystem:
    title: StorageSystem
    description: Represents a storage system used for data movement and transfer operations.
    type: object
    properties:
      type:
        $ref: '#/definitions/SystemType'
    required:
      - type
    allOf:
      - $ref: '#/definitions/System'
  FilePermission:
    title: FilePermission
    description: A permission grant for a single file or folder.
    type: object
    properties:
      permission:
        $ref: '#/definitions/FilePermissionStanza'
      recursive:
        description: Boolean flag indicating whether the permission applies recursively to the remote file item.
        type: boolean
        default: false
    required:
      - permission
    allOf:
      - $ref: '#/definitions/Permission'
  Permission:
    title: Permission
    description: A generic permission applied to any resource in the API
    type: object
    properties:
      username:
        description: The username to whom this permission grant applies
        type: string
      internalUsername:
        description: The internal user associated with this permission
        type: string
      permission:
        $ref: '#/definitions/PermissionStanza'
      created:
        description: The date the permission was created
        type: string
        format: date-time
      lastUpdated:
        description: The date the permission was last updated
        type: string
        format: date-time
      id:
        description: The unique id of this permission
        type: string
    required:
      - username
      - permission
      - created
      - lastUpdated
      - id
  FilePermissionStanza:
    title: FilePermissionStanza
    description: 'A permission object describing read, write, and execute permission for a file item.'
    type: object
    properties:
      execute:
        description: Is the resource executable
        type: boolean
        default: false
    required:
      - execute
    allOf:
      - $ref: '#/definitions/PermissionStanza'
  SystemRole:
    title: SystemRole
    description: A role granted a user on a system
    type: object
    properties:
      username:
        description: The username to whom the role applies.
        type: string
      role:
        $ref: '#/definitions/SystemRoleType'
      created:
        description: The date the role was first granted
        type: string
        format: date-time
      lastUpdated:
        description: The date the role was last updated.
        type: string
        format: date-time
      id:
        description: The unique id of this role grant
        type: string
    required:
      - username
      - role
      - created
      - lastUpdated
      - id
  SystemPublishAction:
    title: SystemPublishAction
    description: Promote the system into the public space for all tenant users to utilize as a shared resource.
    type: object
    properties:
      action:
        type: string
        default: PUBLISH
    required:
      - action
    allOf:
      - $ref: '#/definitions/SystemAction'
  SystemCloneAction:
    title: SystemCloneAction
    description: Clone an existing system as a new system. Auth credentials will not be cloned on the new system.
    type: object
    properties:
      id:
        description: Unique name for new system
        type: string
    allOf:
      - $ref: '#/definitions/SystemAction'
  HistoryEvent:
    title: HistoryEvent
    description: A generic history event representing a change on a resource or one of its associations.
    type: object
    properties:
      created:
        description: The date of the event.
        type: string
        format: date-time
      description:
        description: A brief description of the event details.
        type: string
      status:
        description: The status of the file/folder after this event.
        type: string
      progress:
        $ref: '#/definitions/TransferTaskProgressSummary'
    required:
      - created
      - description
      - status
  FileImportRequest:
    title: FileImportRequest
    description: File import request to copy a file from an accessible URL.
    type: object
    properties:
      fileType:
        description: The file format this file is in. Defaults to raw. This will be used in file transform operations.
        type: string
      notifications:
        description: Notifications to set with the successful acceptance of this upload request
        type: array
        items:
          $ref: '#/definitions/NotificationRequest'
      fileName:
        description: 'The name to give the upload file. If unset, takes the original file name.'
        type: string
      append:
        description: Boolean flag indicating this file should be appended to the target file
        type: boolean
        default: false
      urlToImport:
        description: The URL to import the file from. This parameter is used if not file is uploaded with this post.
        type: string
  UUIDRequest:
    description: Request object to create a new UUID
    type: object
    properties:
      type:
        description: The resource type for which the UUID should be created.
        type: string
  UUIDSummary:
    description: Resource to which a tag has been associated
    type: object
    properties:
      message:
        description: success or failure
        type: string
      result:
        type: array
        items:
          $ref: '#/definitions/UUIDResolution'
      status:
        description: success or failure
        type: string
      version:
        description: API version number
        type: string
  UUIDResolution:
    description: Resource to which a tag has been associated
    type: object
    properties:
      uuid:
        description: uuid created/requested
        type: string
      type:
        description: the resource type represented by this uuid
        type: string
      representation:
        description: the full object representation for this uuid
        type: object
  TagSummary:
    description: Tag object without resource list
    type: object
    properties:
      name:
        description: name of tag
        type: string
      created:
        description: Date tag was created
        type: string
        format: date-time
      lastUpdated:
        description: Date tag was last updated
        type: string
        format: date-time
  TagResource:
    description: Resource to which a tag has been associated
    type: object
    properties:
      id:
        description: uuid of the API resource
        type: string
  Tag:
    description: Base tag object
    type: object
    properties:
      id:
        description: uuid of this tag
        type: string
      name:
        description: name of tag
        type: string
      created:
        description: Date tag was created
        type: string
        format: date-time
      lastUpdated:
        description: Date tag was last updated
        type: string
        format: date-time
      resources:
        description: The list of resource uuid associated with this tag
        type: array
        items:
          $ref: '#/definitions/TagResource'
  TagHistory:
    description: Individual tag event
    type: object
    properties:
      created:
        description: uuid of the referenced resource
        type: string
        format: date-time
      event:
        description: event that occurred on this tag
        type: string
      description:
        description: description of the event which occurred
        type: string
      id:
        description: unique identifier of the event
        type: string
  Tenant:
    description: Tenant organization details
    type: object
    properties:
      id:
        description: uuid of the tenant
        type: string
      name:
        description: human readable name of the tenant organization
        type: string
      baseUrl:
        description: The base url for all tenant requests. This should always be SSL enabled. 
        type: string
      code:
        description: The code by which this tenant is known, eg. agave.prod
        type: string
      created:
        description: When the tenant was created in ISO8601 format
        type: string
        format: date-time
      lastUpdated:
        description: When the tenant was last updated in ISO8601 format
        type: string
        format: date-time
      contact:
        $ref: '#/definitions/TenantContact'
  TenantContact:
    description: Tenant contact information
    type: object
    properties:
      name:
        description: Full name of the contact
        type: string
      email:
        description: The base url for all tenant requests. This should always be SSL enabled. 
        type: string
      url:
        description: The code by which this tenant is known, eg. agave.prod
        type: string
      type:
        description: The type of contact this user represents.
        type: string
        enum:
          - admin
          - support
          - education
          - media
          - training
          - security
      primary:
        description: Whether the contact is the primary contact for the tenant.
        type: boolean
      contact:
        $ref: '#/definitions/TenantContact'