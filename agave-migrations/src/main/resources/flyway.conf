#
# Agave Science API Science 
# Flyway Migration Configuration file
#
# This is filtered by Maven during compilation and filtered for default
# variable values defined in the parent $AGAVE_HOME/config/maven/settings-SAMPLE.xml
# file. These are sufficient to enable this config to successfully run 
# against a development or sandbox deployment of the platform. In a production
# environment, the properties in this file map to environment variables (as 
# supported by all Agave Science API images). The file is filtered at container 
# startup by the /docker_entrypoint.sh script replacing the build values with 
# any environment variables.
#

# Jdbc url to use to connect to the database
flyway.url=${foundation.db.url}

# Fully qualified classname of the jdbc driver (autodetected by default based on flyway.url)
# flyway.driver=${foundation.db.driver}

# User to use to connect to the database. Flyway will prompt you to enter it if not specified.
flyway.user=${foundation.db.username}

# Password to use to connect to the database. Flyway will prompt you to enter it if not specified.
flyway.password=${foundation.db.password}

# Comma-separated list of schemas managed by Flyway. These schema names are case-sensitive.
# (default: The default schema for the datasource connection)
# Consequences:
# - The first schema in the list will be automatically set as the default one during the migration.
# - The first schema in the list will also be the one containing the metadata table.
# - The schemas will be cleaned in the order of this list.
flyway.schemas=${foundation.db.database}

# Name of Flyway's metadata table (default: schema_version)
# By default (single-schema mode) the metadata table is placed in the default schema for the connection provided by the datasource.
# When the flyway.schemas property is set (multi-schema mode), the metadata table is placed in the first schema of the list.
# flyway.table=

# Comma-separated list of locations to scan recursively for migrations. (default: filesystem:<<INSTALL-DIR>>/sql)
# The location type is determined by its prefix.
# Unprefixed locations or locations starting with classpath: point to a package on the classpath and may contain both sql and java-based migrations.
# Locations starting with filesystem: point to a directory on the filesystem and may only contain sql migrations.
flyway.locations=filesystem:sql,classpath:org.iplantc.service.common.migration

# Comma-separated list of fully qualified class names of custom MigrationResolver to use for resolving migrations.
# flyway.resolvers=

# If set to true, default built-in resolvers (jdbc, spring-jdbc and sql) are skipped and only custom resolvers as
# defined by 'flyway.resolvers' are used. (default: false)
flyway.skipDefaultResolvers=false

# Comma-separated list of directories containing JDBC drivers and Java-based migrations. (default: <INSTALL-DIR>/jars)
flyway.jarDirs=

# File name prefix for sql migrations (default: V )
# Sql migrations have the following file name structure: prefixVERSIONseparatorDESCRIPTIONsuffix ,
# which using the defaults translates to V1_1__My_description.sql
flyway.sqlMigrationPrefix=V

# File name prefix for repeatable sql migrations (default: R )
# Repeatable sql migrations have the following file name structure: prefixSeparatorDESCRIPTIONsuffix ,
# which using the defaults translates to R__My_description.sql
flyway.repeatableSqlMigrationPrefix=R

# File name separator for Sql migrations (default: __)
# Sql migrations have the following file name structure: prefixVERSIONseparatorDESCRIPTIONsuffix ,
# which using the defaults translates to V1_1__My_description.sql
flyway.sqlMigrationSeparator=__

# File name suffix for Sql migrations (default: .sql)
# Sql migrations have the following file name structure: prefixVERSIONseparatorDESCRIPTIONsuffix ,
# which using the defaults translates to V1_1__My_description.sql
flyway.sqlMigrationSuffix=.sql

# Encoding of Sql migrations (default: UTF-8)
flyway.encoding=UTF-8

# Whether placeholders should be replaced. (default: true)
flyway.placeholderReplacement=false

# Placeholders to replace in Sql migrations
# flyway.placeholders.user=
# flyway.placeholders.my_other_placeholder=

# Prefix of every placeholder (default: ${ )
# flyway.placeholderPrefix=

# Suffix of every placeholder (default: } )
#flyway.placeholderSuffix=

# Target version up to which Flyway should consider migrations.
# The special value 'current' designates the current version of the schema. (default: <<latest version>>)
#flyway.target=

# Whether to automatically call validate or not when running migrate. (default: true)
flyway.validateOnMigrate=true

# Whether to automatically call clean or not when a validation error occurs. (default: false)
# This is exclusively intended as a convenience for development. Even tough we
# strongly recommend not to change migration scripts once they have been checked into SCM and run, this provides a
# way of dealing with this case in a smooth manner. The database will be wiped clean automatically, ensuring that
# the next migration will bring you back to the state checked into SCM.
# Warning ! Do not enable in production !
flyway.cleanOnValidationError=

# Whether to disabled clean. (default: false)
# This is especially useful for production environments where running clean can be quite a career limiting move.
flyway.cleanDisabled=true

# The version to tag an existing schema with when executing baseline. (default: 1)
flyway.baselineVersion=${project.version}

# The description to tag an existing schema with when executing baseline. (default: << Flyway Baseline >>)
flyway.baselineDescription=Base Migration

# Whether to automatically call baseline when migrate is executed against a non-empty schema with no metadata table.
# This schema will then be initialized with the baselineVersion before executing the migrations.
# Only migrations above baselineVersion will then be applied.
# This is useful for initial Flyway production deployments on projects with an existing DB.
# Be careful when enabling this as it removes the safety net that ensures
# Flyway does not migrate the wrong database in case of a configuration mistake! (default: false)
flyway.baselineOnMigrate=false

# Allows migrations to be run "out of order" (default: false).
# If you already have versions 1 and 3 applied, and now a version 2 is found,
# it will be applied too instead of being ignored.
flyway.outOfOrder=false

# This allows you to tie in custom code and logic to the Flyway lifecycle notifications (default: empty).
# Set this to a comma-separated list of fully qualified FlywayCallback class name implementations
#flyway.callbacks=

# If set to true, default built-in callbacks (sql) are skipped and only custom callback as
# defined by 'flyway.callbacks' are used. (default: false)
#flyway.skipDefaultCallbacks=false

# Ignore missing migrations when reading the metadata table. These are migrations that were performed by an
# older deployment of the application that are no longer available in this version. For example: we have migrations
# available on the classpath with versions 1.0 and 3.0. The metadata table indicates that a migration with version 2.0
# (unknown to us) has also been applied. Instead of bombing out (fail fast) with an exception, a
# warning is logged and Flyway continues normally. This is useful for situations where one must be able to deploy
# a newer version of the application even though it doesn't contain migrations included with an older one anymore.
# true to continue normally and log a warning, false to fail fast with an exception.
flyway.ignoreMissingMigrations=false

# Ignore future migrations when reading the metadata table. These are migrations that were performed by a
# newer deployment of the application that are not yet available in this version. For example: we have migrations
# available on the classpath up to version 3.0. The metadata table indicates that a migration to version 4.0
# (unknown to us) has already been applied. Instead of bombing out (fail fast) with an exception, a
# warning is logged and Flyway continues normally. This is useful for situations where one must be able to redeploy
# an older version of the application after the database has been migrated by a newer one.
# true to continue normally and log a warning, false to fail fast with an exception. (default: true)
flyway.ignoreFutureMigrations=false

# Whether to allow mixing transactional and non-transactional statements within the same migration.
# true if mixed migrations should be allowed. false if an error should be thrown instead. (default: false)
# flyway.allowMixedMigrations=

# The username that will be recorded in the metadata table as having applied the migration.
# <<blank>> for the current database user of the connection. (default: <<blank>>).
flyway.installedBy=${foundation.db.username}
