<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.iplantc.agave</groupId>
		<artifactId>apps</artifactId>
		<version>2.1.10</version>
	</parent>
	<artifactId>apps-core</artifactId>
	<name>iPlant Agave API Apps Service Core</name>
	<description>Core service libs for the Agave Apps Services</description>
	<packaging>jar</packaging>

	<scm>
		<connection>scm:git:ssh://git@bitbucket.org/agaveapi/agave-apps.git</connection>
		<developerConnection>scm:git:ssh://git@bitbucket.org/agaveapi/agave-apps.git</developerConnection>
		<url>https://bitbucket.org/agaveapi/agave-apps</url>
	</scm>

	<properties>
		<force.check.update>false</force.check.update>
	</properties>

	<build>
		<sourceDirectory>src/main/java</sourceDirectory>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
        <testResources>
            <testResource>
                <filtering>true</filtering>
                <directory>src/test/resources</directory>
            </testResource>
            <!-- docker -->
            <testResource>
                <filtering>true</filtering>
                <directory>src/test/docker</directory>
            </testResource>
        </testResources>

		<plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>${maven-jar-plugin.version}</version>
                <executions>
                    <execution>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!--
                the following two plugins exec-maven & maven-dependency along with bash scripts
                replace the surefire maven plugin for executing unit tests.
             -->
<!--
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.3.2</version>
                <executions>
                    <execution>
                        <id>build-utest-container</id>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>src/scripts/docker_setup.sh</executable>
                        </configuration>
                    </execution>
                    <execution>
                        <id>run-utest-container</id>
                        <phase>test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <skip>${skip.utest.docker.run}</skip>
                            <executable>src/scripts/run-test-container.sh</executable>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <skip>${skip.utest.docker.build}</skip>
                </configuration>
            </plugin>
-->
            <!-- Package the service up as a Docker image. -->
<!--
            <plugin>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy</id>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <skip>${skip.docker.build}</skip>
                        </configuration>
                    </execution>
                    &lt;!&ndash; <execution>
                        <id>install</id>
                        <phase>install</phase>
                        <goals>
                            <goal>sources</goal>
                        </goals>
                        <configuration>
                            <skip>${skip.docker.build}</skip>
                        </configuration>
                    </execution> &ndash;&gt;
                </executions>
            </plugin>
-->


			<!-- ************************************ -->
			<!-- *** COMPILE ** -->
			<!-- ************************************ -->

			<!-- Boilerplace compile -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<executions>
					<execution>
						<id>default-compile</id>
						<phase>compile</phase>
						<goals>
							<goal>compile</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<proc>none</proc>
					<debug>true</debug>
					<source>1.7</source>
					<target>1.7</target>
				</configuration>
			</plugin>

			<!-- ************************************ -->
			<!-- *** TESTING ** -->
			<!-- ************************************ -->

			<!-- Use TestNG as the test runner -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<suiteXmlFiles>
						<suiteXmlFile>src/test/resources/testng.xml</suiteXmlFile>
					</suiteXmlFiles>
				</configuration>
			</plugin>

			<!-- ************************************ -->
			<!-- *** CODE COVERAGE ** -->
			<!-- ************************************ -->

			<plugin>
				<groupId>org.codehaus.sonar</groupId>
				<artifactId>sonar-maven-plugin</artifactId>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>${org.eclipse.m2e.lifecycle-mapping.version}</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.apache.maven.plugins
										</groupId>
										<artifactId>
											maven-jar-plugin
										</artifactId>
										<versionRange>
											${maven-jar-plugin.versionRange}
										</versionRange>
										<goals>
											<goal>jar</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.codehaus.mojo
										</groupId>
										<artifactId>
											exec-maven-plugin
										</artifactId>
										<versionRange>
											${exec-maven-plugin.versionRange}
										</versionRange>
										<goals>
											<goal>exec</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<dependencies>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>profiles-core</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>systems-core</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>files-core</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>com.stevesoft.pat</groupId>
			<artifactId>pat</artifactId>
			<version>${pat.version}</version>
		</dependency>
	</dependencies>
</project>
